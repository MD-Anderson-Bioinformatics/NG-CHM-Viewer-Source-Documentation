{
  "filename": "ColorMapManager.js",
  "namespace": "NgChm.CMM",
  "description": [
    "This module manages color maps for heat maps, including creating, setting, and retrieving color maps. It handles both discrete and continuous color maps and provides functionality for color blending, threshold management, and color classification."
  ],
  "declares_functions_in": [
    "CMM"
  ],
  "interacts_with": [
    "NgChm.MAPREP"
  ],
  "classes": [
    {
      "name": "ContColorMap",
      "description": "Handles continuous color mapping, including color blending and threshold management."
    }
  ],
  "member_variables": [],
  "global_variables": [],
  "exports": [
    "CMM.ColorMap",
    "CMM.ColorMapManager",
    "CMM.blendHexColors",
    "CMM.darkenHexColorIfNeeded",
    "CMM.hexToRgba"
  ],
  "functions": [
    {
      "name": "ColorMap",
      "namespace": "CMM",
      "signature": "CMM.ColorMap(heatMap, colorMapObj)",
      "description": "This function initializes a ColorMap object used for managing color mappings in a heat map visualization. It sets up thresholds, colors, and provides methods for manipulating and retrieving color information based on data values.",
      "parameters": [
        {
          "name": "heatMap",
          "type": "HeatMap",
          "description": "The heat map object to which the color map will be applied."
        },
        {
          "name": "colorMapObj",
          "type": "ColorMapObject",
          "description": "An object containing color mapping information, including type, thresholds, colors, and optional RGBA colors."
        }
      ],
      "side_effects": [
        "Modifies the internal state of the ColorMap object, including thresholds and colors."
      ],
      "error_handling": [],
      "returns": {
        "type": "ColorMap",
        "description": "Returns an instance of the ColorMap object with methods to manipulate and retrieve color information."
      }
    },
    {
      "name": "getThresholds",
      "namespace": "None",
      "signature": "getThresholds()",
      "description": "Returns the current thresholds.",
      "parameters": [],
      "returns": {
        "type": "Array",
        "description": "An array containing the current threshold values."
      }
    },
    {
      "name": "setThresholds",
      "namespace": "None",
      "signature": "setThresholds(newthresholds)",
      "description": "Sets the global thresholds to the provided new values.",
      "parameters": [
        {
          "name": "newthresholds",
          "type": "Array",
          "description": "An array containing the new threshold values to be set."
        }
      ],
      "side_effects": [
        "Modifies the global variable 'thresholds' by setting it to the new values provided."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getContinuousThresholdKeys",
      "namespace": "None",
      "signature": "getContinuousThresholdKeys()",
      "description": "This function calculates and returns an array containing 10 continuous threshold breakpoint keys from the original thresholds submitted. It is used only for rendering a continuous classification bar.",
      "parameters": [],
      "side_effects": [],
      "returns": {
        "type": "Array",
        "description": "An array of 10 continuous threshold breakpoint keys."
      }
    },
    {
      "name": "getContinuousThresholdKeySize",
      "namespace": "None",
      "signature": "getContinuousThresholdKeySize()",
      "description": "This function calculates the size separating each 'interim' threshold key for a continuous classification bar.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "number",
        "description": "The size separating each 'interim' threshold key."
      }
    },
    {
      "name": "getColors",
      "namespace": "None",
      "signature": "getColors()",
      "description": "Returns the list of colors stored in the 'colors' variable.",
      "parameters": [],
      "returns": {
        "type": "Array",
        "description": "An array containing color values."
      }
    },
    {
      "name": "setColors",
      "namespace": "None",
      "signature": "setColors(newcolors)",
      "description": "Sets the global colors variable to the provided new colors array.",
      "parameters": [
        {
          "name": "newcolors",
          "type": "Array",
          "description": "An array of new color values to set."
        }
      ],
      "side_effects": [
        "Updates the global variable 'colors' with the new color values provided."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getType",
      "namespace": "None",
      "signature": "getType()",
      "description": "Returns the type of the current object.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "String",
        "description": "The type of the current object."
      }
    },
    {
      "name": "getMissingColor",
      "namespace": "None",
      "signature": "getMissingColor()",
      "description": "Returns the value of the missingColor variable.",
      "parameters": [],
      "returns": {
        "type": "unknown",
        "description": "The value of the missingColor variable."
      }
    },
    {
      "name": "setMissingColor",
      "namespace": "None",
      "signature": "setMissingColor(color)",
      "description": "Sets the missing color to the specified value.",
      "parameters": [
        {
          "name": "color",
          "type": "String",
          "description": "The color value to set as the missing color."
        }
      ],
      "side_effects": [
        "Modifies the global variable 'missingColor'."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "constructor",
      "namespace": "ContColorMap",
      "signature": "ContColorMap:constructor(colorMap, thresholds)",
      "description": "Initializes a new instance of the ContColorMap class, setting up the color map and thresholds for continuous color mapping.",
      "parameters": [
        {
          "name": "colorMap",
          "type": "ColorMap",
          "description": "An instance of the ColorMap class used to retrieve color cuts."
        },
        {
          "name": "thresholds",
          "type": "Array<number>",
          "description": "An array of numerical thresholds used to define the breaks in the color map."
        }
      ],
      "returns": {
        "type": "ContColorMap",
        "description": "A new instance of the ContColorMap class."
      }
    },
    {
      "name": "getColor",
      "namespace": "ContColorMap",
      "signature": "ContColorMap:getColor(value)",
      "description": "Returns a color based on the provided value. If the value is 'Missing' or not a number, it returns a predefined missing color. Otherwise, it converts the value to a number and returns a color from the continuous color map.",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "description": "The value to be mapped to a color. Can be a number or the string 'Missing'."
        }
      ],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "string",
        "description": "The color corresponding to the provided value. If the value is 'Missing' or not a number, returns the missing color."
      }
    },
    {
      "name": "contColor",
      "namespace": "ContColorMap",
      "signature": "ContColorMap:contColor(value)",
      "description": "Determines the color representation for a given value based on predefined thresholds and color mappings.",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The numeric value to be mapped to a color."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "string",
        "description": "The color corresponding to the input value."
      }
    },
    {
      "name": "getContColorMap",
      "namespace": "None",
      "signature": "getContColorMap()",
      "description": "Creates and returns a new instance of the ContColorMap class using the current object and predefined thresholds.",
      "parameters": [],
      "returns": {
        "type": "ContColorMap",
        "description": "A new instance of the ContColorMap class."
      }
    },
    {
      "name": "getCutsColor",
      "namespace": "None",
      "signature": "getCutsColor()",
      "description": "Retrieves the color for cuts from the current data layer in the heat map. If the cuts color is not defined, it returns a default white color in RGBA format.",
      "parameters": [],
      "returns": {
        "type": "object",
        "description": "An object representing the color in RGBA format. If the cuts color is defined, it returns the result of hexToRgba(dl.cuts_color). Otherwise, it returns a default white color { r: 255, g: 255, b: 255, a: 255 }."
      }
    },
    {
      "name": "getColor",
      "namespace": "None",
      "signature": "getColor(value)",
      "description": "Returns an RGBA color value based on the provided value. The function determines the color by comparing the value against predefined thresholds and conditions.",
      "parameters": [
        {
          "name": "value",
          "type": "number|string",
          "description": "The value to be evaluated for determining the corresponding RGBA color. It can be a number or the string 'Missing'."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "string",
        "description": "The RGBA color value corresponding to the provided value."
      }
    },
    {
      "name": "getClassificationColor",
      "namespace": "None",
      "signature": "getClassificationColor(value)",
      "description": "Determines the color classification for a given value based on predefined thresholds and color mappings. Handles both discrete and continuous types of classifications.",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "description": "The value to classify and determine the corresponding color."
        }
      ],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "object",
        "description": "An object representing the RGBA color corresponding to the given value."
      }
    },
    {
      "name": "addBreakpoint",
      "namespace": "None",
      "signature": "addBreakpoint(value, color)",
      "description": "Adds a breakpoint to the thresholds and colors arrays at the appropriate position based on the provided value. It also converts the color to RGBA format and inserts it into the rgbaColors array.",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value at which to add the breakpoint."
        },
        {
          "name": "color",
          "type": "string",
          "description": "The color associated with the breakpoint, in hexadecimal format."
        }
      ],
      "side_effects": [
        "Modifies the thresholds array by inserting the value at the correct position.",
        "Modifies the colors array by inserting the color at the correct position.",
        "Modifies the rgbaColors array by inserting the RGBA equivalent of the color at the correct position."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "changeBreakpoint",
      "namespace": "None",
      "signature": "changeBreakpoint(value, newColor)",
      "description": "Updates the breakpoint value and its associated color in the thresholds, colors, and rgbaColors arrays.",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The new breakpoint value to be inserted."
        },
        {
          "name": "newColor",
          "type": "string",
          "description": "The new color associated with the breakpoint, in hexadecimal format."
        }
      ],
      "side_effects": [
        "Modifies the thresholds array by replacing the old breakpoint value with the new one.",
        "Modifies the colors array by replacing the old color with the new color.",
        "Modifies the rgbaColors array by replacing the old RGBA color with the new RGBA color derived from the new hexadecimal color."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "removeBreakpoint",
      "namespace": "None",
      "signature": "removeBreakpoint(value)",
      "description": "Removes a breakpoint from the thresholds, colors, and rgbaColors arrays based on the provided value.",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "description": "The value used to find and remove the corresponding breakpoint."
        }
      ],
      "side_effects": [
        "Modifies the thresholds array by removing an element.",
        "Modifies the colors array by removing an element.",
        "Modifies the rgbaColors array by removing an element."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "findBounds",
      "namespace": "None",
      "signature": "findBounds(value, thresholds)",
      "description": "Determines the upper and lower bounds for a given value within a set of thresholds.",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value for which the bounds need to be found."
        },
        {
          "name": "thresholds",
          "type": "Array<number>",
          "description": "An array of threshold values used to determine the bounds."
        }
      ],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "object",
        "description": "An object containing the upper and lower bounds for the given value."
      }
    },
    {
      "name": "blendColors",
      "namespace": "None",
      "signature": "blendColors(value, idx, thresholds)",
      "description": "This function blends two colors based on a given value and thresholds. It calculates the ratio of the value within the specified thresholds and interpolates between two colors to produce a blended color.",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value used to determine the blend ratio between the two colors."
        },
        {
          "name": "idx",
          "type": "number",
          "description": "The index of the lower threshold in the thresholds array."
        },
        {
          "name": "thresholds",
          "type": "array",
          "description": "An array of threshold values used to determine the blending range."
        }
      ],
      "side_effects": [
        "Uses global variable rgbaColors to access color values."
      ],
      "returns": {
        "type": "object",
        "description": "An object representing the blended color in { r: ###, g: ###, b: ###, a: 255 } format."
      }
    },
    {
      "name": "hexToRgb",
      "namespace": "None",
      "signature": "hexToRgb(hex)",
      "description": "Converts a hexadecimal color code to an RGB color object.",
      "parameters": [
        {
          "name": "hex",
          "type": "string",
          "description": "The hexadecimal color code to be converted."
        }
      ],
      "returns": {
        "type": "object",
        "description": "An object with properties r, g, and b representing the red, green, and blue components of the color, or null if the input is not a valid hexadecimal color code."
      }
    },
    {
      "name": "getColorLuminance",
      "namespace": "None",
      "signature": "getColorLuminance(color)",
      "description": "Calculates the luminance of a given color in hexadecimal format. The function converts the hex color to its RGB components and then computes the luminance using the standard formula.",
      "parameters": [
        {
          "name": "color",
          "type": "String",
          "description": "The color in hexadecimal format (e.g., '#FFFFFF')."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [
        {
          "errorCode": "null",
          "description": "Returns null if the provided color cannot be converted to RGB."
        }
      ],
      "returns": {
        "type": "Number",
        "description": "The luminance value of the color, or null if the color is invalid."
      }
    },
    {
      "name": "isColorDark",
      "namespace": "None",
      "signature": "isColorDark(rgb)",
      "description": "Determines if a given RGB color is dark based on its luminance value.",
      "parameters": [
        {
          "name": "rgb",
          "type": "object",
          "description": "An object representing the RGB color with properties r, g, and b."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "boolean",
        "description": "Returns true if the color is dark, otherwise false."
      }
    },
    {
      "name": "getRgbToHex",
      "namespace": "None",
      "signature": "getRgbToHex(rgb)",
      "description": "Converts an RGB color object to its hexadecimal string representation.",
      "parameters": [
        {
          "name": "rgb",
          "type": "object",
          "description": "An object representing the RGB color with properties r, g, and b."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "string",
        "description": "The hexadecimal string representation of the RGB color."
      }
    },
    {
      "name": "rgbToHex",
      "namespace": "None",
      "signature": "rgbToHex(rgb)",
      "description": "Converts an RGB color value to its hexadecimal representation.",
      "parameters": [
        {
          "name": "rgb",
          "type": "object",
          "description": "An object containing the red (r), green (g), and blue (b) color values."
        }
      ],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "string",
        "description": "The hexadecimal color representation of the input RGB value."
      }
    },
    {
      "name": "componentToHex",
      "namespace": "None",
      "signature": "componentToHex(c)",
      "description": "Converts a single color component (red, green, or blue) to its hexadecimal representation.",
      "parameters": [
        {
          "name": "c",
          "type": "number",
          "description": "The color component value, expected to be an integer between 0 and 255."
        }
      ],
      "returns": {
        "type": "string",
        "description": "The hexadecimal string representation of the color component, padded with a leading zero if necessary."
      }
    },
    {
      "name": "blendHexColors",
      "namespace": "None",
      "signature": "blendHexColors(color1, color2, ratio)",
      "description": "Blends two hex color values based on a given ratio and returns the resulting hex color. The ratio determines the weight of each color in the blend.",
      "parameters": [
        {
          "name": "color1",
          "type": "string",
          "description": "The first hex color value to blend."
        },
        {
          "name": "color2",
          "type": "string",
          "description": "The second hex color value to blend."
        },
        {
          "name": "ratio",
          "type": "number",
          "description": "The ratio to blend the colors. A value between 0.0 and 1.0 where 0.0 means only color2 is used and 1.0 means only color1 is used."
        }
      ],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "string",
        "description": "The resulting blended hex color value."
      }
    },
    {
      "name": "darkenHexColorIfNeeded",
      "namespace": "None",
      "signature": "darkenHexColorIfNeeded(hex)",
      "description": "This function takes a hex color code and checks if any of its RGB components are above 240. If so, it darkens the color by scaling down the RGB values proportionally so that the highest value is 240. If none of the RGB components are above 240, it returns the original hex color.",
      "parameters": [
        {
          "name": "hex",
          "type": "string",
          "description": "The hex color code to be checked and potentially darkened."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "string",
        "description": "The original or darkened hex color code."
      }
    },
    {
      "name": "ColorMapManager",
      "namespace": "CMM",
      "signature": "CMM.ColorMapManager(heatMap)",
      "description": "Manages color maps for a heat map, allowing retrieval and setting of color maps for different data layers, row classifications, and column classifications.",
      "parameters": [
        {
          "name": "heatMap",
          "type": "HeatMap",
          "description": "The heat map object that contains the map configuration and data."
        }
      ],
      "side_effects": [
        "Modifies the color map configurations within the heat map object."
      ],
      "returns": {
        "type": "void",
        "description": "This constructor function does not return a value."
      }
    },
    {
      "name": "getColorMap",
      "namespace": "None",
      "signature": "getColorMap(type, colorMapName)",
      "description": "Retrieves a color map based on the specified type and color map name. It creates a new instance of CMM.ColorMap using the heat map and the color map data from the colorMapCollection.",
      "parameters": [
        {
          "name": "type",
          "type": "String",
          "description": "The type of color map to retrieve. It can be 'data', 'row', or other types."
        },
        {
          "name": "colorMapName",
          "type": "String",
          "description": "The name of the color map to retrieve from the colorMapCollection."
        }
      ],
      "side_effects": [
        "Creates a new instance of CMM.ColorMap."
      ],
      "returns": {
        "type": "CMM.ColorMap",
        "description": "An instance of CMM.ColorMap initialized with the specified color map data."
      }
    },
    {
      "name": "setColorMap",
      "namespace": "None",
      "signature": "setColorMap(colorMapName, colorMap, type)",
      "description": "Sets the color map for a specified type (data, row, or column) by updating the existing color map with new colors, thresholds, and missing color values.",
      "parameters": [
        {
          "name": "colorMapName",
          "type": "String",
          "description": "The name of the color map to be set."
        },
        {
          "name": "colorMap",
          "type": "ColorMap",
          "description": "An object containing the new color map details including colors, thresholds, and missing color."
        },
        {
          "name": "type",
          "type": "String",
          "description": "The type of color map to be set. It can be 'data', 'row', or 'column'."
        }
      ],
      "side_effects": [
        "Updates the existing color map in the colorMapCollection with new colors, thresholds, and missing color values."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "hexToRgba",
      "namespace": "None",
      "signature": "hexToRgba(hex)",
      "description": "Converts a hexadecimal color code to an RGBA color object with a fixed alpha value of 255.",
      "parameters": [
        {
          "name": "hex",
          "type": "String",
          "description": "A string representing the hexadecimal color code."
        }
      ],
      "returns": {
        "type": "Object",
        "description": "An object representing the RGBA color with properties r, g, b, and a. Returns null if the input is not a valid hexadecimal color code."
      }
    }
  ]
}