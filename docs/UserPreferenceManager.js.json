{
  "filename": "UserPreferenceManager.js",
  "namespace": "NgChm.UPM",
  "description": [
    "This module manages user preferences for the heat map application. It provides functionalities to edit, apply, reset, and validate user preferences related to heat map display, including data layers, covariate classification bars, and row/column settings."
  ],
  "declares_functions_in": [
    "UPM",
    "UHM"
  ],
  "interacts_with": [
    "NgChm.UHM",
    "NgChm.MAPREP",
    "NgChm.MMGR",
    "NgChm.UTIL",
    "NgChm.DVW",
    "NgChm.SUM",
    "NgChm.DET",
    "NgChm.DEV",
    "NgChm.DMM",
    "NgChm.CMM",
    "NgChm.CM"
  ],
  "classes": [],
  "member_variables": [
    {
      "name": "UHM.previewDiv",
      "description": "A global variable to store the preview div element for the user preferences."
    },
    {
      "name": "UPM.applyDone",
      "description": "A flag indicating whether the apply operation is done."
    },
    {
      "name": "UPM.bkpColorMaps",
      "description": "A backup of the color maps used to restore the state if the user cancels the preferences."
    },
    {
      "name": "UPM.filterVal",
      "description": "The value used for filtering covariate bars."
    },
    {
      "name": "UPM.hasClasses",
      "description": "A flag indicating whether the heat map has classification bars."
    },
    {
      "name": "UPM.resetVal",
      "description": "Stores the reset values for the preferences."
    },
    {
      "name": "UPM.searchPerformed",
      "description": "A flag indicating whether a search operation has been performed."
    }
  ],
  "global_variables": [],
  "exports": [
    "UPM.editPreferences",
    "UPM.locatePrefsPanel",
    "UPM.setMessage",
    "UPM.showRowsColsPrefs",
    "UPM.showInfoPrefs",
    "UPM.showLayerPrefs",
    "UPM.showClassPrefs",
    "UPM.prefsCancelButton",
    "UPM.prefsMoveButton",
    "UPM.removeSettingsPanels",
    "UPM.prefsApplyButton",
    "UPM.doApply",
    "UPM.prefsSuccess",
    "UPM.prefsError",
    "UPM.prefsApply",
    "UPM.prefsValidate",
    "UPM.prefsValidateForNumeric",
    "UPM.prefsValidateBreakColors",
    "UPM.prefsApplyBreaks",
    "UPM.setupLayerPrefs",
    "UPM.setupLayerBreaksToPreset",
    "UPM.showLayerBreak",
    "UPM.setupClassPrefs",
    "UPM.setupAllClassesPrefs",
    "UPM.setupClassBreaks",
    "UPM.showPlotTypeProperties",
    "UPM.showAllBars",
    "UPM.incrementAllHeights",
    "UPM.decrementAllHeights",
    "UPM.setShowAll",
    "UPM.showClassBreak",
    "UPM.filterClassPrefs",
    "UPM.filterAllClassesTable",
    "UPM.addClassPrefOptions",
    "UPM.filterShow",
    "UPM.setupMapInfoPrefs",
    "UPM.setupRowColPrefs",
    "UPM.showDendroSelections",
    "UPM.showLabelSelections",
    "UPM.dendroRowShowChange",
    "UPM.dendroColShowChange",
    "UPM.getResetVals",
    "UPM.prefsResetButton",
    "UHM.getTempCM",
    "UHM.loadColorPreviewDiv"
  ],
  "functions": [
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "uiElement.onclick(ev)",
      "description": "Handles the click event on a UI element and triggers the editPreferences function from the UPM (UserPreferenceManager) namespace.",
      "parameters": [
        {
          "name": "ev",
          "type": "Event",
          "description": "The event object representing the click event."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Triggers UPM.editPreferences with the target of the event."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "uiElement.onclick()",
      "description": "This function assigns an event handler to the 'onclick' event of the 'uiElement'. When the element is clicked, it triggers the 'prefsMoveButton' function from the 'UPM' namespace.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Triggers the UPM.prefsMoveButton() function when the uiElement is clicked."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "uiElement.onclick()",
      "description": "This function assigns an event handler to the 'onclick' event of the 'uiElement'. When the element is clicked, it triggers the 'UPM.prefsCancelButton' function.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Triggers the UPM.prefsCancelButton function when the uiElement is clicked."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "uiElement.onclick()",
      "description": "This function is an event handler for the 'click' event on a UI element. When the element is clicked, it triggers the UPM.showInfoPrefs() function.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Triggers the UPM.showInfoPrefs() function."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "uiElement.onclick()",
      "description": "This function is an event handler for the 'onclick' event of a UI element. When the element is clicked, it triggers the 'showLayerPrefs' method from the UPM object.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Triggers the UPM.showLayerPrefs() method."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return any value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "uiElement.onclick()",
      "description": "This function is an event handler for the 'onclick' event of a UI element. When the element is clicked, it triggers the 'showRowsColsPrefs' method from the UPM object.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Triggers the UPM.showRowsColsPrefs() method."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return any value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "uiElement.onclick()",
      "description": "This function is an event handler for the 'onclick' event of a UI element. When the element is clicked, it triggers the 'showClassPrefs' method from the UPM object.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Triggers the UPM.showClassPrefs() method."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return any value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "uiElement.onclick(ev)",
      "description": "This function is an event handler for the 'onclick' event of a UI element. When the element is clicked, it triggers the 'editPreferences' method of the 'UPM' object, passing the event target as an argument.",
      "parameters": [
        {
          "name": "ev",
          "type": "Event",
          "description": "The event object that contains information about the click event."
        }
      ],
      "side_effects": [
        "Calls UPM.editPreferences with the event target."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "editPreferences",
      "namespace": "UPM",
      "signature": "UPM.editPreferences(e, errorMsg)",
      "description": "This is the main driver function for editing preferences. It is called when the Edit preferences 'gear' button is pressed on the main application screen or when user preferences have been applied but errors have occurred. It handles the display and setup of various preference panels and manages error states.",
      "parameters": [
        {
          "name": "e",
          "type": "Event",
          "description": "The event object triggered by the user action."
        },
        {
          "name": "errorMsg",
          "type": "Array",
          "description": "An array containing error messages and related information if errors have occurred."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the display state of the preferences panel.",
        "Initializes or updates global variables related to preferences.",
        "Updates the state of various preference panels and messages."
      ],
      "error_handling": [
        {
          "errorCode": "errorMsg",
          "description": "Handles different types of errors by displaying appropriate preference panels and messages based on the error information provided in the errorMsg array."
        }
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "locatePrefsPanel",
      "namespace": "UPM",
      "signature": "UPM.locatePrefsPanel()",
      "description": "The purpose of this function is to position the preferences panel on the screen based on the dimensions and positions of various elements.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the style properties (top, height, left) of the preferences panel element.",
        "Sets the data-state attribute of the prefsMove_btn element to 'moveLeft'."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setMessage",
      "namespace": "UPM",
      "signature": "UPM.setMessage(errorMsgTxt)",
      "description": "Sets an error message at the bottom of the preferences panel. If an error message already exists, it is removed before adding the new one. Additionally, it sets up click event handlers for the apply, reset, and close buttons in the preferences panel.",
      "parameters": [
        {
          "name": "errorMsgTxt",
          "type": "String",
          "description": "The error message text to be displayed. If null or empty, any existing error message will be removed."
        }
      ],
      "side_effects": [
        "Modifies the DOM by adding or removing an error message in the preferences panel.",
        "Sets click event handlers for the apply, reset, and close buttons in the preferences panel."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "onclick()",
      "description": "Sets the onclick event handler for the element with the ID 'prefApply_btn' to call the UPM.prefsApplyButton function.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Sets the onclick event handler for the element with the ID 'prefApply_btn'."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "onclick()",
      "description": "Assigns an event handler to the 'prefReset_btn' button that triggers the UPM.prefsResetButton function when clicked.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Assigns an event handler to the 'prefReset_btn' button."
      ],
      "error_handling": [],
      "returns": {
        "type": "undefined",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "onclick()",
      "description": "Assigns an event handler to the 'prefClose_btn' button that triggers the UPM.prefsCancelButton function when clicked.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Assigns an event handler to the 'prefClose_btn' button."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "showRowsColsPrefs",
      "namespace": "UPM",
      "signature": "UPM.showRowsColsPrefs()",
      "description": "The purpose of this function is to perform the processing for the preferences tab when the user selects the 'Rows & Cols' tab.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls UTIL.showTab with 'prefRowsCols_btn' to display the 'Rows & Cols' preferences tab."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "showInfoPrefs",
      "namespace": "UPM",
      "signature": "UPM.showInfoPrefs()",
      "description": "Displays the preferences tab for map information by triggering the UTIL.showTab function with the appropriate tab identifier.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "showLayerPrefs",
      "namespace": "UPM",
      "signature": "UPM.showLayerPrefs()",
      "description": "The purpose of this function is to perform the processing for the preferences tab when the user selects the 'Data Layers' tab.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls UTIL.showTab with 'prefLayer_btn' to display the preferences tab.",
        "Calls UPM.showLayerBreak() to perform additional processing for the 'Data Layers' tab."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "showClassPrefs",
      "namespace": "UPM",
      "signature": "UPM.showClassPrefs()",
      "description": "This function activates the preferences tab when the user selects the 'Covariates' tab.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Activates the preferences tab by calling UTIL.showTab with 'prefClass_btn' as the argument."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "prefsCancelButton",
      "namespace": "UPM",
      "signature": "UPM.prefsCancelButton()",
      "description": "The purpose of this function is to perform all processing necessary to exit the user preferences dialog WITHOUT applying or saving any changes made by the user when the Cancel button is pressed on the ColorMap preferences dialog. Since the dataLayer colormap must be edited to add/delete breakpoints, the backup colormap (saved when preferences are first opened) is re-applied to the colorMapManager. Then the preferences DIV is retrieved and removed.",
      "parameters": [],
      "side_effects": [
        "Re-applies the backup colormap to the colorMapManager.",
        "Removes the settings panels.",
        "Hides the preferences panel.",
        "Sets UPM.searchPerformed to false."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "prefsMoveButton",
      "namespace": "UPM",
      "signature": "UPM.prefsMoveButton()",
      "description": "This function toggles the preferences editing panel between the left and right sides of the screen.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the 'dataset.state' property of the 'prefsMove_btn' element.",
        "Changes the 'left' style property of the 'prefs' element."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "removeSettingsPanels",
      "namespace": "UPM",
      "signature": "UPM.removeSettingsPanels()",
      "description": "The purpose of this function is to remove all panels that are content specific before closing the preferences dialog.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Clears the message set by UPM.setMessage.",
        "Removes all child elements from each tab in the preferences dialog."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "prefsApplyButton",
      "namespace": "UPM",
      "signature": "UPM.prefsApplyButton(isReset)",
      "description": "The purpose of this function is to perform all processing necessary to reconfigure the \"current\" presentation of the heat map in the viewer when the Apply button is pressed on the ColorMap Preferences Dialog. First validations are performed. If errors are found, preference changes are NOT applied and the user is re-presented with the preferences dialog and the error found. If no errors are found, all changes are applied to the heatmap and the summary panel, detail panel, and covariate bars are redrawn. However, these changes are not yet permanently saved to the JSON files that are used to configure heat map presentation.",
      "parameters": [
        {
          "name": "isReset",
          "type": "boolean",
          "description": "Indicates whether the preferences should be reset to default values."
        }
      ],
      "side_effects": [
        "Disables the Apply button.",
        "Calls UPM.doApply with the isReset parameter after a short delay."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "doApply",
      "namespace": "UPM",
      "signature": "UPM.doApply(isReset)",
      "description": "Applies user preferences and updates the heat map. If isReset is true, it applies preferences without validation. Otherwise, it validates preferences before applying them.",
      "parameters": [
        {
          "name": "isReset",
          "type": "boolean",
          "description": "Indicates whether to reset preferences without validation."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Updates the heat map with unapplied changes.",
        "Enables the apply button.",
        "Sets UPM.applyDone to true if there is a validation error."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "No return value."
      }
    },
    {
      "name": "disableApplyButton",
      "namespace": "None",
      "signature": "disableApplyButton()",
      "description": "This function disables the Apply button by setting its 'disabled' property to true and updates the UPM.applyDone flag to false. It is typically called when the Apply or Reset button is pressed.",
      "parameters": [],
      "side_effects": [
        "Disables the Apply button by setting its 'disabled' property to true.",
        "Sets the UPM.applyDone flag to false."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "enableApplyButton",
      "namespace": "None",
      "signature": "function enableApplyButton()",
      "description": "This function enables the 'Apply' button on the user interface after the apply/reset process has finished. It checks the status of the apply process and either enables the button or retries after a short delay.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the 'disabled' property of the 'Apply' button in the DOM."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "prefsSuccess",
      "namespace": "UPM",
      "signature": "UPM.prefsSuccess()",
      "description": "This function performs the necessary actions when user preferences are determined to be valid. It is shared by the Apply and Save buttons.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Sets UPM.filterVal to null.",
        "Sets UPM.bkpColorMaps to null.",
        "Calls SUM.redrawSummaryPanel() to redraw the summary panel.",
        "Calls DMM.resizeDetailMapCanvases() to resize detail map canvases.",
        "Calls DET.updateSelections(false) to update selections without skipping resize.",
        "Sets UPM.applyDone to true.",
        "Calls UPM.setMessage(\"\") to clear any messages."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "prefsError",
      "namespace": "UPM",
      "signature": "UPM.prefsError(errorMsg)",
      "description": "The purpose of this function is to handle the scenario when user preferences are determined to be invalid. It resets the filter value and re-displays the user preferences dialog with the provided error message.",
      "parameters": [
        {
          "name": "errorMsg",
          "type": "String",
          "description": "The error message to be displayed in the user preferences dialog."
        }
      ],
      "side_effects": [
        "Resets UPM.filterVal to null.",
        "Re-displays the user preferences dialog with the error message."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "prefsApply",
      "namespace": "UPM",
      "signature": "UPM.prefsApply()",
      "description": "Applies all user preferences for the heat map, including row and column dendrogram configurations, top items, covariate bar preferences, label sizing, and data layer preferences. This function is shared by the Apply and Save buttons.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the heat map's row and column dendrogram configurations.",
        "Updates the top items for rows and columns in the heat map.",
        "Sets classification preferences for row and column covariate bars.",
        "Adjusts label display settings for rows and columns.",
        "Applies grid preferences for data layers in the heat map."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "prefsValidate",
      "namespace": "UPM",
      "signature": "UPM.prefsValidate()",
      "description": "The purpose of this function is to validate all user changes to the heatmap properties. When the very first error is found, an error message (string array containing error information) is created and returned to the prefsApply function.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "Array",
        "description": "An array containing error information if validation fails, otherwise null."
      }
    },
    {
      "name": "validateDataLayers",
      "namespace": "None",
      "signature": "validateDataLayers()",
      "description": "Validates the data layers in the heat map by checking each layer's breakpoints using the prefsValidateBreakPoints function. Returns an error message if any layer is invalid, otherwise returns null.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "String",
        "description": "An error message if any data layer is invalid, otherwise null."
      }
    },
    {
      "name": "validateAxis",
      "namespace": "None",
      "signature": "validateAxis(axis)",
      "description": "Validates the axis configuration for a heat map by checking the covariate configuration. If the color map type is continuous, it validates the breakpoints using the prefsValidateBreakPoints function.",
      "parameters": [
        {
          "name": "axis",
          "type": "String",
          "description": "The axis of the heat map to be validated."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "String",
        "description": "Returns an error message if validation fails, otherwise returns null."
      }
    },
    {
      "name": "prefsValidateForNumeric",
      "namespace": "UPM",
      "signature": "UPM.prefsValidateForNumeric()",
      "description": "Validates user input for numeric preferences in heat map configurations, ensuring values are positive numbers and checking for duplicate colors.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the global errorMsg variable if validation fails."
      ],
      "error_handling": [
        {
          "errorCode": "ALL",
          "description": "Returns an error message if bar heights are not between 0 and 99."
        },
        {
          "errorCode": "classPrefs",
          "description": "Returns an error message if covariate bar low or high bounds are not numeric."
        },
        {
          "errorCode": "classPrefs",
          "description": "Returns an error message if foreground and background colors are duplicate."
        }
      ],
      "returns": {
        "type": "Array",
        "description": "An array containing error details if validation fails, otherwise null."
      }
    },
    {
      "name": "prefsValidateBreakPoints",
      "namespace": "None",
      "signature": "prefsValidateBreakPoints(colorMapAxis, colorMapName, prefPanel)",
      "description": "The purpose of this function is to validate all user breakpoint and color changes to heatmap data layer properties. When the first error is found, an error message (string array containing error information) is created and returned to the prefsApply function.",
      "parameters": [
        {
          "name": "colorMapAxis",
          "type": "String",
          "description": "The axis of the color map to validate (e.g., 'data')."
        },
        {
          "name": "colorMapName",
          "type": "String",
          "description": "The name of the color map to validate."
        },
        {
          "name": "prefPanel",
          "type": "String",
          "description": "The preference panel associated with the color map."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the global variable prevBreakValue.",
        "Logs errors to the console if break elements are not found."
      ],
      "error_handling": [
        {
          "errorCode": "charBreak",
          "description": "Handles non-numeric breakpoint values by setting an error message."
        },
        {
          "errorCode": "breakOrder",
          "description": "Handles breakpoints that are not in increasing order by setting an error message."
        },
        {
          "errorCode": "dupeBreak",
          "description": "Handles duplicate breakpoints by setting an error message."
        }
      ],
      "returns": {
        "type": "Array",
        "description": "An array containing error information if validation fails, otherwise null."
      }
    },
    {
      "name": "prefsValidateBreakColors",
      "namespace": "UPM",
      "signature": "UPM.prefsValidateBreakColors(colorMapName, type, prefPanel)",
      "description": "Validates user color changes to heatmap classification and data layer properties. Returns an error message if duplicate colors are found.",
      "parameters": [
        {
          "name": "colorMapName",
          "type": "String",
          "description": "The name of the color map to validate."
        },
        {
          "name": "type",
          "type": "String",
          "description": "The type of the color map (e.g., 'data')."
        },
        {
          "name": "prefPanel",
          "type": "Object",
          "description": "The preference panel object where the validation results will be displayed."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "Array",
        "description": "An array containing the key, prefPanel, and error message if a duplicate color is found, otherwise null."
      }
    },
    {
      "name": "prefsApplyBreaks",
      "namespace": "UPM",
      "signature": "UPM.prefsApplyBreaks(colorMapName, colorMapAxis)",
      "description": "The purpose of this function is to apply all user-entered changes to colors and breakpoints for a specified color map.",
      "parameters": [
        {
          "name": "colorMapName",
          "type": "String",
          "description": "The name of the color map to which the changes will be applied."
        },
        {
          "name": "colorMapAxis",
          "type": "String",
          "description": "The axis of the color map to which the changes will be applied."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Updates the colors and thresholds of the specified color map.",
        "Modifies the missing color element in the DOM.",
        "Updates the color map in the color map manager."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getNewBreakColors",
      "namespace": "None",
      "signature": "getNewBreakColors(colorMapAxis, colorMapName, pos, action)",
      "description": "The purpose of this function is to grab all user color entries for a given colormap and place them in a string array. It iterates through the screen elements, pulling the current color entry for each element, placing it in a new array, and returning that array. This function is called by the prefsApplyBreaks function and is also called from the data layer addLayerBreak and deleteLayerBreak functions with parameters passed in for the position to add/delete and the action to be performed (add/delete).",
      "parameters": [
        {
          "name": "colorMapAxis",
          "type": "String",
          "description": "The axis of the colormap, e.g., 'row', 'col', or 'data'."
        },
        {
          "name": "colorMapName",
          "type": "String",
          "description": "The name of the colormap."
        },
        {
          "name": "pos",
          "type": "Number",
          "description": "The position to add/delete a color entry."
        },
        {
          "name": "action",
          "type": "String",
          "description": "The action to be performed, either 'add' or 'delete'."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the color entries in the colormap based on user input.",
        "Reads color values from the DOM elements."
      ],
      "error_handling": [],
      "returns": {
        "type": "Array",
        "description": "An array of color values representing the updated colormap."
      }
    },
    {
      "name": "getNewBreakThresholds",
      "namespace": "None",
      "signature": "getNewBreakThresholds(colorMapAxis, colorMapName, pos, action)",
      "description": "The purpose of this function is to grab all user data layer breakpoint entries for a given colormap and place them in a new array. It iterates through the screen elements, pulling the current breakpoint entry for each element, placing it in a new array, and returning that array. This function is called by the prefsApplyBreaks function (only for data layers). It is also called from the data layer addLayerBreak and deleteLayerBreak functions with parameters passed in for the position to add/delete and the action to be performed (add/delete).",
      "parameters": [
        {
          "name": "colorMapAxis",
          "type": "String",
          "description": "The axis of the colormap (e.g., 'data')."
        },
        {
          "name": "colorMapName",
          "type": "String",
          "description": "The name of the colormap."
        },
        {
          "name": "pos",
          "type": "Number",
          "description": "The position to add/delete a breakpoint."
        },
        {
          "name": "action",
          "type": "String",
          "description": "The action to be performed ('add' or 'delete')."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the DOM elements by reading their values.",
        "Potentially changes the number of breakpoints in the colormap."
      ],
      "error_handling": [],
      "returns": {
        "type": "Array",
        "description": "An array of new breakpoint values."
      }
    },
    {
      "name": "setupLayerPrefs",
      "namespace": "UPM",
      "signature": "UPM.setupLayerPrefs(e, prefprefs)",
      "description": "Constructs a DIV panel containing all data layer preferences. A dropdown list containing all data layers is presented, and individual DIVs for each data layer, containing breakpoints/colors, are added.",
      "parameters": [
        {
          "name": "e",
          "type": "Event",
          "description": "The event object that triggered the function."
        },
        {
          "name": "prefprefs",
          "type": "Object",
          "description": "Preferences object containing configuration options for the data layers."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the inner HTML of the element with id 'layerPrefs' by appending a table and other elements.",
        "Creates and appends a dropdown list of data layers.",
        "Sets up individual DIVs for each data layer with breakpoints/colors."
      ],
      "error_handling": [],
      "returns": {
        "type": "HTMLElement",
        "description": "The modified 'layerPrefs' element containing the data layer preferences."
      }
    },
    {
      "name": "onchange",
      "namespace": "None",
      "signature": "el.onchange()",
      "description": "This function is an event handler for the 'change' event on the element 'el'. When the event is triggered, it calls the UPM.showLayerBreak() function to perform an action related to showing a layer break.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls UPM.showLayerBreak() which may have its own side effects."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "genPreset",
      "namespace": "None",
      "signature": "genPreset(key, colors, missingColor, axis, mapType)",
      "description": "Generate a color scheme preset element. It consists of a gradient bar for the colors in the color scheme followed by a box containing the color for missing values. When clicked, the layer (based on key, axis, and mapType) breaks are set to those of the preset. A unique id is assigned to each new preset to assist automated tests.",
      "parameters": [
        {
          "name": "key",
          "type": "String",
          "description": "The key representing the data layer."
        },
        {
          "name": "colors",
          "type": "Array",
          "description": "An array of color values for the gradient."
        },
        {
          "name": "missingColor",
          "type": "String",
          "description": "The color value for missing data."
        },
        {
          "name": "axis",
          "type": "String",
          "description": "The axis information for the layer."
        },
        {
          "name": "mapType",
          "type": "String",
          "description": "The type of map being used."
        }
      ],
      "side_effects": [
        "Increments the global variable presetId.",
        "Modifies the onclick event handler for the created elements."
      ],
      "returns": {
        "type": "HTMLElement",
        "description": "A DIV element containing the color scheme preset."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "onclick(event)",
      "description": "Handles the click event by setting up layer breaks to a preset configuration using the UPM.setupLayerBreaksToPreset function.",
      "parameters": [
        {
          "name": "event",
          "type": "Event",
          "description": "The event object representing the click event."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the layer breaks configuration using the UPM.setupLayerBreaksToPreset function."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setupLayerBreaks",
      "namespace": "None",
      "signature": "setupLayerBreaks(colorMapAxis, mapName)",
      "description": "Constructs a DIV containing a list of breakpoints and colors for a given matrix data layer.",
      "parameters": [
        {
          "name": "colorMapAxis",
          "type": "String",
          "description": "The axis of the color map to be used."
        },
        {
          "name": "mapName",
          "type": "String",
          "description": "The name of the map for which the layer breaks are being set up."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the DOM by creating and appending a DIV element with breakpoints and color settings.",
        "Sets up event listeners for updating color previews."
      ],
      "error_handling": [],
      "returns": {
        "type": "HTMLElement",
        "description": "A DIV element containing the breakpoints and color settings for the specified map layer."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "el.onclick()",
      "description": "This function is an event handler for the 'click' event on the element 'el'. When the element is clicked, it triggers the 'loadColorPreviewDiv' function from the 'UHM' namespace, passing 'mapName' as an argument.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Triggers the UHM.loadColorPreviewDiv function with mapName as an argument."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "fillBreaksTable",
      "namespace": "None",
      "signature": "fillBreaksTable(breakpts, colorMapAxis, layerName, thresholds, colors)",
      "description": "Populates a table with breakpoints and corresponding color inputs for a given layer and color map axis. It dynamically creates input fields and buttons for adding or deleting breakpoints.",
      "parameters": [
        {
          "name": "breakpts",
          "type": "HTMLElement",
          "description": "The HTML element where the breakpoints table will be populated."
        },
        {
          "name": "colorMapAxis",
          "type": "string",
          "description": "The axis of the color map, either 'data' or another specified axis."
        },
        {
          "name": "layerName",
          "type": "string",
          "description": "The name of the layer for which the breakpoints are being set."
        },
        {
          "name": "thresholds",
          "type": "Array<number>",
          "description": "An array of threshold values for the breakpoints."
        },
        {
          "name": "colors",
          "type": "Array<string>",
          "description": "An array of color values corresponding to each threshold."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the inner HTML of the breakpts element by removing existing children and adding new input fields and buttons."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getTempCM",
      "namespace": "UHM",
      "signature": "UHM.getTempCM(mapName, firstLoad)",
      "description": "This function creates a temporary color map object to be used by loadColorPreviewDiv. If the gear menu has just been opened (firstLoad), it uses the saved values from the color map manager. Otherwise, it reads the values stored in the input boxes, as these values may differ from the ones stored in the color map manager.",
      "parameters": [
        {
          "name": "mapName",
          "type": "String",
          "description": "The name of the color map."
        },
        {
          "name": "firstLoad",
          "type": "Boolean",
          "description": "Indicates whether the gear menu has just been opened."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "Object",
        "description": "A temporary color map object containing colors, thresholds, missing color, and type."
      }
    },
    {
      "name": "loadColorPreviewDiv",
      "namespace": "UHM",
      "signature": "UHM.loadColorPreviewDiv(mapName, firstLoad)",
      "defined_section": "FUNCTION - loadColorPreviewDiv",
      "description": "This function updates the color distribution preview div to reflect the current color palette in the gear panel. It generates a gradient based on color thresholds and displays a histogram of data distribution.",
      "parameters": [
        {
          "name": "mapName",
          "type": "String",
          "description": "The name of the map for which the color preview is being loaded."
        },
        {
          "name": "firstLoad",
          "type": "Boolean",
          "description": "Indicates whether this is the first load of the color preview."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Updates the innerHTML of the element with id 'previewWrapper' + mapName.",
        "Generates and inserts an SVG histogram into the preview div."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setupLayerBreaksToPreset",
      "namespace": "UPM",
      "signature": "UPM.setupLayerBreaksToPreset(e, mapName, preset, missingColor, axis, type)",
      "description": "This function is executed when the user selects a predefined color scheme. It fills the first and last breakpoints with the predefined colors and interpolates the breakpoints in between.",
      "parameters": [
        {
          "name": "e",
          "type": "Event",
          "description": "The event object associated with the user action."
        },
        {
          "name": "mapName",
          "type": "String",
          "description": "The name of the map element to which the color scheme is applied."
        },
        {
          "name": "preset",
          "type": "Array",
          "description": "An array of colors in HEX format representing the predefined color scheme."
        },
        {
          "name": "missingColor",
          "type": "String",
          "description": "The color to be used for missing data points."
        },
        {
          "name": "axis",
          "type": "String",
          "description": "The axis associated with the map element, if applicable."
        },
        {
          "name": "type",
          "type": "String",
          "description": "The type of color mapping, either 'Discrete' or 'Continuous'."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the color preferences of map elements based on the predefined color scheme."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "showLayerBreak",
      "namespace": "UPM",
      "signature": "UPM.showLayerBreak(selLayer)",
      "description": "The purpose of this function is to show the appropriate data layer panel based upon the user selection of the data layer dropdown on the data layer tab of the preferences screen. This function is also called when an error is trapped, opening the data layer DIV that contains the erroneous data entry.",
      "parameters": [
        {
          "name": "selLayer",
          "type": "String",
          "description": "The selected layer value from the dropdown. If undefined, the function will use the current selection."
        }
      ],
      "side_effects": [
        "Modifies the display property of DIV elements corresponding to the data layer options.",
        "Sets the value of the data layer dropdown to the selected layer if provided."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "addLayerBreak",
      "namespace": "None",
      "signature": "addLayerBreak(colorMapAxis, pos, colorMapName)",
      "description": "The purpose of this function is to add a breakpoint row to a data layer colormap. A new row is created using the preceding row as a template (i.e., breakpoint value and color same as row clicked on).",
      "parameters": [
        {
          "name": "colorMapAxis",
          "type": "String",
          "description": "The axis of the colormap to which the breakpoint is being added."
        },
        {
          "name": "pos",
          "type": "Number",
          "description": "The position in the colormap where the new breakpoint should be added."
        },
        {
          "name": "colorMapName",
          "type": "String",
          "description": "The name of the colormap to which the breakpoint is being added."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the thresholds and colors of the specified colormap.",
        "Reloads the colormap with the new breakpoints and colors."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "deleteLayerBreak",
      "namespace": "None",
      "signature": "deleteLayerBreak(colorMapAxis, pos, colorMapName)",
      "description": "The purpose of this function is to remove a breakpoint row from a data layer colormap.",
      "parameters": [
        {
          "name": "colorMapAxis",
          "type": "String",
          "description": "The axis of the colormap from which the breakpoint is to be removed."
        },
        {
          "name": "pos",
          "type": "Number",
          "description": "The position of the breakpoint to be removed."
        },
        {
          "name": "colorMapName",
          "type": "String",
          "description": "The name of the colormap from which the breakpoint is to be removed."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the thresholds and colors of the specified colormap.",
        "Reloads the colormap with updated thresholds and colors."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "reloadLayerBreaksColorMap",
      "namespace": "None",
      "signature": "reloadLayerBreaksColorMap(colorMapAxis, colorMapName, colorMap)",
      "description": "The purpose of this function is to reload the colormap for a given data layer. It updates the colormap manager with the new colormap, removes any existing break preferences, and sets up new break preferences based on the colormap axis.",
      "parameters": [
        {
          "name": "colorMapAxis",
          "type": "string",
          "description": "The axis of the colormap, e.g., 'data' or another axis."
        },
        {
          "name": "colorMapName",
          "type": "string",
          "description": "The name of the colormap to be reloaded."
        },
        {
          "name": "colorMap",
          "type": "object",
          "description": "The colormap object containing the new colormap data."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Updates the colormap manager with the new colormap.",
        "Removes existing break preferences from the DOM.",
        "Sets up new break preferences and appends them to the layerPrefs DIV."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setupClassPrefs",
      "namespace": "UPM",
      "signature": "UPM.setupClassPrefs(e, prefprefs)",
      "description": "Constructs a DIV panel containing all covariate bar preferences. A dropdown list containing all covariate classification bars is presented, and individual DIVs for each data layer, containing breakpoints/colors, are added. Additionally, a 'front panel' DIV is created for 'ALL' classification bars that contains preferences that are global to all of the individual bars.",
      "parameters": [
        {
          "name": "e",
          "type": "Event",
          "description": "The event object that triggered the function."
        },
        {
          "name": "prefprefs",
          "type": "Object",
          "description": "Preferences object for the classification bars."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the DOM by appending elements to the 'classPrefs' element.",
        "Creates and appends a table and various input elements to the 'classPrefs' element."
      ],
      "error_handling": [],
      "returns": {
        "type": "HTMLElement",
        "description": "The updated 'classPrefs' element containing the covariate bar preferences."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "el.onclick()",
      "description": "This function is an event handler for the 'onclick' event of the element 'el'. When the element is clicked, it triggers the 'filterClassPrefs' method from the 'UPM' namespace with the argument 'true'.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls UPM.filterClassPrefs(true)"
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onchange",
      "namespace": "None",
      "signature": "el.onchange()",
      "description": "This function is an event handler for the 'onchange' event of the element 'el'. When the value of 'el' changes, it triggers the 'showClassBreak' method of the 'UPM' object.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Triggers the UPM.showClassBreak() method."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setupAllClassesPrefs",
      "namespace": "UPM",
      "signature": "UPM.setupAllClassesPrefs()",
      "description": "Constructs a DIV containing a list of all covariate bars with informational data and user preferences that are common to all bars (show/hide and size).",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the DOM by appending a new DIV element containing a table of covariate bars and their preferences."
      ],
      "error_handling": [],
      "returns": {
        "type": "HTMLElement",
        "description": "A DIV element containing a table with covariate bars and their user preferences."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "el.onclick()",
      "description": "This function is an event handler for the 'click' event on the element 'el'. When the element is clicked, it calls the 'decrementAllHeights' method from the 'UPM' namespace.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls the 'UPM.decrementAllHeights' method which may modify the heights of elements."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "el.onclick()",
      "description": "This function is an event handler for the 'click' event on the element 'el'. When the element is clicked, it calls the 'incrementAllHeights' method from the 'UPM' object.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls the 'incrementAllHeights' method from the 'UPM' object, which may modify the heights of elements."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onchange",
      "namespace": "None",
      "signature": "el.onchange()",
      "description": "This function is an event handler for the 'onchange' event of the element 'el'. When the 'onchange' event is triggered, it calls the 'showAllBars' method from the 'UPM' object.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls the UPM.showAllBars() method, which may have its own side effects."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onchange",
      "namespace": "None",
      "signature": "el.onchange()",
      "description": "This function is an event handler for the 'onchange' event of the element 'el'. When the 'onchange' event is triggered, it calls the 'setShowAll' method of the 'UPM' object.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls the 'setShowAll' method of the 'UPM' object, which may have its own side effects."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onchange",
      "namespace": "None",
      "signature": "el.onchange()",
      "description": "This function is assigned to the 'onchange' event of an element 'el'. When the element's value changes, it triggers the 'setShowAll' method of the 'UPM' object.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls the 'setShowAll' method of the 'UPM' object."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setupClassBreaks",
      "namespace": "UPM",
      "signature": "UPM.setupClassBreaks(e, key, barType, classBar)",
      "description": "Constructs a DIV containing informational data and a list of categories/colors for a given covariate classification bar.",
      "parameters": [
        {
          "name": "e",
          "type": "Event",
          "description": "The event object that triggered the function."
        },
        {
          "name": "key",
          "type": "String",
          "description": "A unique identifier for the classification bar."
        },
        {
          "name": "barType",
          "type": "String",
          "description": "The type of the bar (e.g., 'color_plot', 'bar_plot')."
        },
        {
          "name": "classBar",
          "type": "Object",
          "description": "An object containing properties of the classification bar such as 'bar_type', 'bg_color', 'fg_color', 'low_bound', and 'high_bound'."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the DOM by creating and appending new elements.",
        "Changes the display properties of the created elements based on the bar type."
      ],
      "error_handling": [],
      "returns": {
        "type": "HTMLElement",
        "description": "A DIV element containing the constructed informational data and category/color list."
      }
    },
    {
      "name": "onchange",
      "namespace": "None",
      "signature": "el.onchange()",
      "description": "This function is an event handler for the 'change' event of the element 'el'. When the 'change' event is triggered, it calls the UPM.showPlotTypeProperties function with the keyRC parameter.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls UPM.showPlotTypeProperties with keyRC"
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setupCovariateBreaks",
      "namespace": "None",
      "signature": "setupCovariateBreaks(colorMapAxis, covariateName)",
      "description": "Sets up the covariate breaks for a given color map axis and covariate name by retrieving the heat map configuration and appending the break preferences to the class preferences element in the DOM.",
      "parameters": [
        {
          "name": "colorMapAxis",
          "type": "String",
          "description": "The axis of the color map for which the covariate breaks are being set up."
        },
        {
          "name": "covariateName",
          "type": "String",
          "description": "The name of the covariate for which the breaks are being set up."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Appends break preferences to the DOM element with id 'classPrefs'."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "showPlotTypeProperties",
      "namespace": "UPM",
      "signature": "UPM.showPlotTypeProperties(keyRC)",
      "description": "This function toggles the display properties of plot type preferences based on the selected bar type. It shows or hides specific HTML elements depending on the value of the selected bar type.",
      "parameters": [
        {
          "name": "keyRC",
          "type": "String",
          "description": "A key used to identify the specific plot type preference elements in the DOM."
        }
      ],
      "side_effects": [
        "Modifies the display style of HTML elements with IDs constructed using the keyRC parameter."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "showAllBars",
      "namespace": "UPM",
      "signature": "UPM.showAllBars()",
      "description": "Sets the condition of the 'show' checkbox for all covariate bars on the covariate bars tab of the user preferences dialog. When the 'show all' box is checked, all other boxes are checked.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the checked state of checkboxes for row and column classification bars based on the 'show all' checkbox state."
      ],
      "returns": {
        "type": "void",
        "description": "No return value."
      }
    },
    {
      "name": "incrementAllHeights",
      "namespace": "UPM",
      "signature": "UPM.incrementAllHeights()",
      "description": "Increments the height preferences of all row and column classification bars in a heat map, ensuring that the height does not exceed 99.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the value of height preference elements in the DOM for both row and column classification bars."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "decrementAllHeights",
      "namespace": "UPM",
      "signature": "UPM.decrementAllHeights()",
      "description": "This function decrements the height preferences of all row and column classification bars in a heat map by 1, ensuring that the values do not go below 0.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the value of height preference elements in the DOM for both row and column classification bars."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setShowAll",
      "namespace": "UPM",
      "signature": "UPM.setShowAll()",
      "description": "Sets the condition of the 'show all' checkbox on the covariate bars tab of the user preferences dialog. If any individual covariate bar checkbox is unchecked, the 'show all' checkbox will be unchecked. Conversely, if all covariate bar checkboxes are checked, the 'show all' checkbox will be checked.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the checked state of the 'show all' checkbox based on the state of individual covariate bar checkboxes."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "showClassBreak",
      "namespace": "UPM",
      "signature": "UPM.showClassBreak(selClass, selAxis)",
      "description": "The purpose of this function is to show the appropriate classification bar panel based upon the user selection of the covariate dropdown on the covariates tab of the preferences screen. This function is also called when an error is trapped, opening the covariate DIV that contains the erroneous data entry.",
      "parameters": [
        {
          "name": "selClass",
          "type": "String",
          "description": "The selected class from the covariate dropdown."
        },
        {
          "name": "selAxis",
          "type": "String",
          "description": "The selected axis, if any, to further specify the class."
        }
      ],
      "side_effects": [
        "Updates the value of the classPref_list dropdown.",
        "Changes the display property of the classification bar panels based on the selected class."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "filterClassPrefs",
      "namespace": "UPM",
      "signature": "UPM.filterClassPrefs(filterOn)",
      "description": "Initiates the process of filtering option choices for classifications. It is triggered when either the 'Filter Covariates' or 'Clear Filters' button is pressed on the covariates preferences dialog. The global filter value variable is set when filtering and cleared when clearing, and the editPreferences function is called to reload all preferences.",
      "parameters": [
        {
          "name": "filterOn",
          "type": "boolean",
          "description": "Indicates whether to apply the filter (true) or clear it (false)."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Sets UPM.searchPerformed to true.",
        "Modifies the innerText of the filter button's span element.",
        "Changes the onclick event of the filter button.",
        "Updates the value of the search preference select element.",
        "Sets or clears the global variable UPM.filterVal.",
        "Calls UPM.addClassPrefOptions() to add class preference options.",
        "Calls UPM.filterAllClassesTable(hiddenItems) to filter the classes table.",
        "Calls UPM.showClassBreak('ALL') to show class breaks."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "filterButton.onclick()",
      "description": "This function is an event handler for the 'onclick' event of the 'filterButton'. When the button is clicked, it calls the 'filterClassPrefs' method from the 'UPM' namespace with 'false' as an argument.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls the 'UPM.filterClassPrefs' method with 'false' as an argument."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "filterButton.onclick()",
      "description": "This function is assigned to the onclick event of the filterButton. When the button is clicked, it calls the UPM.filterClassPrefs function with a true argument to filter class preferences.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "filterAllClassesTable",
      "namespace": "UPM",
      "signature": "UPM.filterAllClassesTable(hiddenItems)",
      "description": "Filters the rows of the 'tableAllClasses' table by hiding rows whose first cell's text matches any of the items in the hiddenItems array.",
      "parameters": [
        {
          "name": "hiddenItems",
          "type": "Array<String>",
          "description": "An array of strings representing the items to be hidden in the table."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the visibility of rows in the 'tableAllClasses' table by adding or removing the 'hide' class."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "addClassPrefOptions",
      "namespace": "UPM",
      "signature": "UPM.addClassPrefOptions()",
      "description": "Assigns option values to the Covariates dropdown control on the Covariates preferences tab. All covariates are loaded at startup, but the filter control limits the visible options in the dropdown. Returns a string array containing a list of all options that are not being displayed, which is used to hide rows on the ALL covariates panel.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the options of the 'classPref_list' dropdown element in the DOM.",
        "Updates the value of bar type preferences for row and column classifications."
      ],
      "returns": {
        "type": "Array",
        "description": "A string array containing a list of all options that are not being displayed."
      }
    },
    {
      "name": "filterShow",
      "namespace": "UPM",
      "signature": "UPM.filterShow(key)",
      "description": "Determines whether a given covariates bar should be shown based on the state of the covariates filter search text box.",
      "parameters": [
        {
          "name": "key",
          "type": "String",
          "description": "The key representing the covariate to be checked against the filter value."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "Boolean",
        "description": "Returns true if the covariate should be shown, otherwise false."
      }
    },
    {
      "name": "setupMapInfoPrefs",
      "namespace": "UPM",
      "signature": "UPM.setupMapInfoPrefs(e, prefprefs)",
      "description": "Sets up and displays the map information preferences for a heat map, including details such as map size, description, build time, versions, layers, and attributes.",
      "parameters": [
        {
          "name": "e",
          "type": "Event",
          "description": "The event object that triggered the function."
        },
        {
          "name": "prefprefs",
          "type": "Object",
          "description": "Preferences object containing user-defined settings for the map information display."
        }
      ],
      "side_effects": [
        "Modifies the inner HTML of the element with ID 'infoPrefs' by appending a table containing map information."
      ],
      "returns": {
        "type": "HTMLElement",
        "description": "The HTML element containing the map information preferences table."
      }
    },
    {
      "name": "matchAny",
      "namespace": "None",
      "signature": "matchAny(str, regExpArray)",
      "description": "Checks if the given string matches any of the regular expressions in the provided array.",
      "parameters": [
        {
          "name": "str",
          "type": "String",
          "description": "The string to be tested against the array of regular expressions."
        },
        {
          "name": "regExpArray",
          "type": "Array",
          "description": "An array of regular expressions to test the string against."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "Boolean",
        "description": "Returns true if the string matches any of the regular expressions, otherwise returns false."
      }
    },
    {
      "name": "setupRowColPrefs",
      "namespace": "UPM",
      "signature": "UPM.setupRowColPrefs(e, prefprefs)",
      "description": "Constructs a DIV panel containing all row and column preferences. Two sections are presented, one for rows and the other for columns. Informational data begins each section and properties for modifying the appearance of row/col dendrograms appear at the end.",
      "parameters": [
        {
          "name": "e",
          "type": "Event",
          "description": "The event object that triggered the function."
        },
        {
          "name": "prefprefs",
          "type": "Object",
          "description": "Preferences object containing user-defined settings."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the inner HTML of the element with id 'rowsColsPrefs'."
      ],
      "error_handling": [],
      "returns": {
        "type": "HTMLElement",
        "description": "The updated DIV element containing row and column preferences."
      }
    },
    {
      "name": "dendroShowOptions",
      "namespace": "None",
      "signature": "dendroShowOptions()",
      "description": "Generates and returns an array of HTML option elements for a dropdown menu, providing options for displaying summary and detail, summary only, or hiding the content.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "Array",
        "description": "An array of HTML option elements."
      }
    },
    {
      "name": "onchange",
      "namespace": "None",
      "signature": "el.onchange()",
      "description": "This function is assigned to the 'onchange' event of the 'el' element. When the 'el' element's value changes, it triggers the 'UPM.dendroRowShowChange' function.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Triggers the UPM.dendroRowShowChange function."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onchange",
      "namespace": "None",
      "signature": "el.onchange()",
      "description": "This function is an event handler for the 'onchange' event of the element 'el'. It triggers the 'UPM.dendroColShowChange' function whenever the value of 'el' changes.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Triggers the UPM.dendroColShowChange function."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "showDendroSelections",
      "namespace": "UPM",
      "signature": "UPM.showDendroSelections()",
      "description": "Sets the states of the row and column dendrogram show and height preferences based on the current heatmap configuration.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the value and options of the HTML select element with id 'rowDendroShowPref'.",
        "Modifies the value and options of the HTML select element with id 'rowDendroHeightPref'.",
        "Modifies the value and options of the HTML select element with id 'colDendroShowPref'.",
        "Modifies the value and options of the HTML select element with id 'colDendroHeightPref'."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "showLabelSelections",
      "namespace": "UPM",
      "signature": "UPM.showLabelSelections()",
      "description": "Sets the states of the label length and truncation preferences for both column and row labels based on the current heat map configuration.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Updates the values of HTML elements with IDs 'colLabelSizePref', 'colLabelAbbrevPref', 'rowLabelSizePref', and 'rowLabelAbbrevPref' based on the heat map configuration."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "dendroRowShowChange",
      "namespace": "UPM",
      "signature": "UPM.dendroRowShowChange()",
      "description": "This function responds to a change event on the 'show row dendrogram' dropdown. If the selected value is 'NONE', it sets the row dendrogram height to 10 and disables the dropdown. If the selected value is one of the 'Show' options and the dropdown was previously disabled, it sets the height to the default value of 100 and enables the dropdown.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the value and disabled state of the 'rowDendroHeightPref' dropdown."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "dendroColShowChange",
      "namespace": "UPM",
      "signature": "UPM.dendroColShowChange()",
      "description": "This function responds to a change event on the 'show row dendrogram' dropdown. If the selected value is 'NONE', it sets the row dendrogram height to 10 and disables the dropdown. If the selected value is one of the 'Show' options and the dropdown was previously disabled, it sets the height to the default value of 100 and enables the dropdown.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the value and state of the 'colDendroHeightPref' dropdown element."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getResetVals",
      "namespace": "UPM",
      "signature": "UPM.getResetVals()",
      "description": "Retrieves the current configuration and state of the heat map, including dendrogram configurations, row and column configurations, matrix information, and classification configurations. The function returns these values as a JSON string to prevent changes as the user modifies preferences in the preference manager.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "string",
        "description": "A JSON string representing the current heat map configuration and state."
      }
    },
    {
      "name": "prefsResetButton",
      "namespace": "UPM",
      "signature": "UPM.prefsResetButton()",
      "description": "Resets the user preferences for the dendrogram, data matrix, and covariate bar panels to their default values as defined in the UPM.resetVal object.",
      "parameters": [],
      "side_effects": [
        "Modifies the DOM elements related to user preferences for dendrogram, data matrix, and covariate bar panels.",
        "Calls UPM.dendroRowShowChange() and UPM.dendroColShowChange() to update the dendrogram display.",
        "Calls UHM.loadColorPreviewDiv(dl) to update the color preview for data layers.",
        "Calls UPM.showPlotTypeProperties(name + \"_col\") to update the plot type properties.",
        "Calls UPM.prefsApplyButton(1) to apply the reset preferences."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    }
  ]
}