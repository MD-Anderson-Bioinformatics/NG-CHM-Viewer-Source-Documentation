{
  "filename": "DetailHeatMapManager.js",
  "namespace": "NgChm.DMM",
  "description": [
    "This module manages the creation, configuration, and manipulation of detail heat map views within the NgChm application. It handles the addition, removal, and updating of detail heat maps, as well as the switching between primary and secondary maps. It also provides functionality for setting up the display and interaction of these maps, including resizing canvases, setting display parameters, and managing user interactions with the heat map elements."
  ],
  "declares_functions_in": [
    "DMM",
    "DetailHeatMapView"
  ],
  "interacts_with": [
    "NgChm.UTIL",
    "NgChm.MAPREP",
    "NgChm.MMGR",
    "NgChm.DVW",
    "NgChm.DET",
    "NgChm.DEV",
    "NgChm.DETDDR",
    "NgChm.Pane",
    "NgChm.PIM",
    "NgChm.SUM",
    "NgChm.LNK",
    "NgChm.SRCHSTATE",
    "NgChm.SRCH"
  ],
  "classes": [
    {
      "name": "DetailHeatMapView",
      "description": "Represents a detailed view of a heat map, including its configuration, display parameters, and interaction handlers."
    }
  ],
  "member_variables": [
    {
      "name": "DMM.nextMapNumber",
      "description": "The next available heat map object iterator used for subscripting new map DOM elements."
    },
    {
      "name": "DVW.primaryMap",
      "description": "The primary detail heat map object currently in use."
    }
  ],
  "global_variables": [],
  "exports": [
    "DMM.addDetailMap",
    "DMM.completeMapItemConfig",
    "DMM.RemoveDetailMap",
    "DMM.getPrimaryDetailMap",
    "DMM.switchToPrimary",
    "DMM.setPrimaryDetailMap",
    "DMM.resizeDetailMapCanvases",
    "DMM.setDetailMapDisplay",
    "DMM.setSubRibbonView",
    "DMM.switchPaneToDetail"
  ],
  "functions": [
    {
      "name": "constructor",
      "namespace": "DetailHeatMapView",
      "signature": "DetailHeatMapView:constructor(template)",
      "description": "Initializes a new instance of the DetailHeatMapView class with the provided template. This constructor sets up various properties required for managing and rendering a detailed heat map view.",
      "parameters": [
        {
          "name": "template",
          "type": "object",
          "description": "An object containing initialization values for all pertinent variables of the DetailHeatMapView."
        }
      ],
      "side_effects": [
        "Initializes various properties of the DetailHeatMapView instance with default values or values from the provided template."
      ],
      "returns": {
        "type": "DetailHeatMapView",
        "description": "A new instance of the DetailHeatMapView class."
      }
    },
    {
      "name": "heatMap",
      "namespace": "DetailHeatMapView",
      "signature": "DetailHeatMapView:heatMap()",
      "description": "Getter function that retrieves the heat map displayed in the mapItem.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "HeatMap",
        "description": "The heat map object displayed in the mapItem."
      }
    },
    {
      "name": "isVisible",
      "namespace": "DetailHeatMapView",
      "signature": "DetailHeatMapView:isVisible()",
      "description": "Return true if the mapItem is visible, i.e., contained in a visible pane.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "boolean",
        "description": "Returns true if the pane containing the mapItem is not collapsed and is displayed; otherwise, returns false."
      }
    },
    {
      "name": "getScaledVisibleCovariates",
      "namespace": "DetailHeatMapView",
      "signature": "DetailHeatMapView:getScaledVisibleCovariates(axis)",
      "description": "Return the scaled covariates for the specified axis.",
      "parameters": [
        {
          "name": "axis",
          "type": "String",
          "description": "The axis for which to get the scaled visible covariates."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "Array",
        "description": "An array of scaled covariates for the specified axis."
      }
    },
    {
      "name": "getCovariateBarLabelFont",
      "namespace": "DetailHeatMapView",
      "signature": "DetailHeatMapView:getCovariateBarLabelFont(axis)",
      "description": "Return the font to use for covariate bars on the specified axis.",
      "parameters": [
        {
          "name": "axis",
          "type": "String",
          "description": "The axis for which the covariate bar label font is to be determined. Typically, this can be 'row' or 'column'."
        }
      ],
      "returns": {
        "type": "String",
        "description": "The font style to be used for the covariate bar labels on the specified axis."
      }
    },
    {
      "name": "setCovariateBarLabelFont",
      "namespace": "DetailHeatMapView",
      "signature": "DetailHeatMapView:setCovariateBarLabelFont(axis, font)",
      "description": "Sets the font to use for covariate bars on the specified axis. If the axis is a row, it sets the row class label font; otherwise, it sets the column class label font.",
      "parameters": [
        {
          "name": "axis",
          "type": "String",
          "description": "The axis for which the font is being set. It determines whether the font is applied to row or column covariate bars."
        },
        {
          "name": "font",
          "type": "String",
          "description": "The font to be used for the covariate bar labels."
        }
      ],
      "side_effects": [
        "Modifies the rowClassLabelFont or colClassLabelFont property of the DetailHeatMapView instance."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "updateSelection",
      "namespace": "DetailHeatMapView",
      "signature": "DetailHeatMapView:updateSelection(noResize)",
      "description": "The purpose of this function is to set the state of a given detail heat map panel. This function is called when the selected row or column is changed. It redraws the yellow selection box and sets a timeout for redrawing the selection.",
      "parameters": [
        {
          "name": "noResize",
          "type": "boolean",
          "description": "Indicates whether the resize operation should be skipped."
        }
      ],
      "side_effects": [
        "Redraws the yellow selection box on the summary heat map.",
        "Sets a timeout for redrawing the selection."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "removeLabel",
      "namespace": "DetailHeatMapView",
      "signature": "DetailHeatMapView:removeLabel(label)",
      "description": "Removes a specified label from the DetailHeatMapView instance by delegating the task to the DET.removeLabel function.",
      "parameters": [
        {
          "name": "label",
          "type": "String",
          "description": "The label to be removed from the DetailHeatMapView instance."
        }
      ],
      "side_effects": [
        "Modifies the state of the DetailHeatMapView instance by removing the specified label."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "addLabelDiv",
      "namespace": "DetailHeatMapView",
      "signature": "DetailHeatMapView:addLabelDiv(parent, id, className, text, longText, left, top, fontSize, rotate, index, axis, xy)",
      "description": "Adds a label div element to the specified parent element with various styling and positioning options.",
      "parameters": [
        {
          "name": "parent",
          "type": "HTMLElement",
          "description": "The parent HTML element to which the label div will be added."
        },
        {
          "name": "id",
          "type": "String",
          "description": "The ID to assign to the label div."
        },
        {
          "name": "className",
          "type": "String",
          "description": "The class name to assign to the label div."
        },
        {
          "name": "text",
          "type": "String",
          "description": "The text content of the label div."
        },
        {
          "name": "longText",
          "type": "String",
          "description": "The long text content of the label div, possibly for tooltips or additional information."
        },
        {
          "name": "left",
          "type": "Number",
          "description": "The left position (in pixels) of the label div."
        },
        {
          "name": "top",
          "type": "Number",
          "description": "The top position (in pixels) of the label div."
        },
        {
          "name": "fontSize",
          "type": "Number",
          "description": "The font size of the text in the label div."
        },
        {
          "name": "rotate",
          "type": "Number",
          "description": "The rotation angle (in degrees) of the label div."
        },
        {
          "name": "index",
          "type": "Number",
          "description": "The index value for ordering or identification purposes."
        },
        {
          "name": "axis",
          "type": "String",
          "description": "The axis information, possibly for alignment or positioning."
        },
        {
          "name": "xy",
          "type": "Object",
          "description": "An object containing x and y coordinates for positioning."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setButtons",
      "namespace": "DetailHeatMapView",
      "signature": "DetailHeatMapView:setButtons()",
      "description": "This function sets up the buttons for the DetailHeatMapView by delegating the task to the DEV.setButtons method.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return any value."
      }
    },
    {
      "name": "addDetailMap",
      "namespace": "DMM",
      "signature": "DMM.addDetailMap(chm, pane, mapNumber, isPrimary, restoreInfo)",
      "description": "Adds a new detail heat map object to the DetailMaps object array. If there is no primary map, it will be populated based on an initial values template. Otherwise, it will be populated from the primary heat map object and marked as a 'Secondary' heat map.",
      "parameters": [
        {
          "name": "chm",
          "type": "object",
          "description": "The current heat map object."
        },
        {
          "name": "pane",
          "type": "object",
          "description": "The pane where the new detail map will be added."
        },
        {
          "name": "mapNumber",
          "type": "number",
          "description": "The number identifier for the new map."
        },
        {
          "name": "isPrimary",
          "type": "boolean",
          "description": "Flag indicating if the new map is the primary detail map."
        },
        {
          "name": "restoreInfo",
          "type": "object",
          "description": "Information to restore the map from a saved state."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the DetailMaps object array by adding a new detail heat map object.",
        "May set the new map as the primary detail map.",
        "May resize row and column dendrograms if the map is not primary."
      ],
      "error_handling": [],
      "returns": {
        "type": "DetailHeatMapView",
        "description": "The newly created detail heat map object."
      }
    },
    {
      "name": "completeMapItemConfig",
      "namespace": "DMM",
      "signature": "DMM.completeMapItemConfig(mapItem, chm, mapNumber)",
      "description": "The purpose of this function is to flesh out the mapItem (either initial or copy) being created. It sets various properties and callbacks for the mapItem based on the provided parameters.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object that is being configured."
        },
        {
          "name": "chm",
          "type": "object",
          "description": "The container holding the children elements for the map item."
        },
        {
          "name": "mapNumber",
          "type": "number",
          "description": "The number representing the map panel."
        }
      ],
      "side_effects": [
        "Sets various properties on the mapItem object, including chm, version, canvases, label elements, dendrograms, panel number, label post script, label divs, and label callbacks."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "RemoveDetailMap",
      "namespace": "DMM",
      "signature": "DMM.RemoveDetailMap(pane)",
      "description": "The purpose of this function is to remove a detail heat map object from the DetailMaps array. If the removed map was the primary map, it switches to the next available map or sets the primary map to null if no maps are left.",
      "parameters": [
        {
          "name": "pane",
          "type": "String",
          "description": "The identifier of the pane associated with the detail map to be removed."
        }
      ],
      "side_effects": [
        "Modifies the DVW.detailMaps array by removing the specified detail map.",
        "If the removed map was the primary map, it updates DVW.primaryMap to the next available map or sets it to null if no maps are left."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getPrimaryDetailMap",
      "namespace": "DMM",
      "signature": "DMM.getPrimaryDetailMap()",
      "description": "The purpose of this function is to retrieve the Primary detail heat map object from the DetailMaps array.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "object",
        "description": "The primary detail heat map object from the DetailMaps array."
      }
    },
    {
      "name": "switchToPrimary",
      "namespace": "DMM",
      "signature": "DMM.switchToPrimary(mapItem)",
      "description": "The purpose of this function is to switch one map item from Secondary to Primary and set all others to Secondary.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item to be switched to Primary."
        }
      ],
      "side_effects": [
        "Changes the version of the map items in DVW.detailMaps.",
        "Updates the dataset version of the make-primary button in the pane header."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setPrimaryDetailMap",
      "namespace": "DMM",
      "signature": "DMM.setPrimaryDetailMap(mapItem)",
      "description": "Sets a secondary map item as the primary map item. This occurs when the primary map is closed and a secondary map is open, or when assigned by the user.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object to be set as the primary map."
        }
      ],
      "side_effects": [
        "Sets the version of the map item to 'P'.",
        "Updates the global variable DVW.primaryMap with the new primary map item.",
        "Modifies the dataset version of the make-primary button in the pane header.",
        "Calls SUM.drawLeftCanvasBox() to update the canvas.",
        "Clears the selected region in row and column dendrograms if they exist.",
        "Sets the ribbon mode bar for row and column dendrograms if the map item is a dendrogram and in ribbon mode."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "resizeDetailMapCanvases",
      "namespace": "DMM",
      "signature": "DMM.resizeDetailMapCanvases()",
      "description": "Sets the size of all detail canvases following a potential size change, such as changes to the covariate bars.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the dimensions of canvases in DVW.detailMaps by calling DET.setCanvasDimensions on each."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setDetailMapDisplay",
      "namespace": "DMM",
      "signature": "DMM.setDetailMapDisplay(mapItem, restoreInfo)",
      "description": "The purpose of this function is to complete the construction of a detail heat map object and add it to the DetailMaps object array.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object that contains the details of the heat map to be displayed."
        },
        {
          "name": "restoreInfo",
          "type": "object",
          "description": "Optional. Contains information for restoring the map display, such as zoom levels."
        }
      ],
      "called_urls": [
        "UTIL.getURLParameter"
      ],
      "side_effects": [
        "Modifies DVW.detailMaps array by adding the mapItem.",
        "Sets DVW.primaryMap if mapItem.version is 'P'.",
        "Updates the DOM element with id 'search_text' if URL parameter 'selected' is present."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setSelectionAsDetailView",
      "namespace": "None",
      "signature": "setSelectionAsDetailView(searchLabels, axis)",
      "description": "Sets the detail view for a selected item based on the provided search labels and axis. It retrieves the currently open menu canvas and uses it to find the corresponding map item. If the map item is found, it sets the detail view for that item using the provided search labels.",
      "parameters": [
        {
          "name": "searchLabels",
          "type": "Array",
          "description": "An array of labels used to search and set the detail view."
        },
        {
          "name": "axis",
          "type": "String",
          "description": "The axis parameter, though present in the function signature, is not used within the function body."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the detail view of a map item based on the provided search labels."
      ],
      "error_handling": [
        {
          "errorCode": "console.error",
          "description": "Logs an error message if the map item cannot be found."
        }
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setDetailView",
      "namespace": "None",
      "signature": "setDetailView(mapItem, searchLabels)",
      "description": "This function creates a sub-ribbon view that matches the currently selected box in the detail panel. It uses the first and last selected rows and columns to define the sub-ribbon view, making it suitable for drag-selected boxes but not for random selections across the map.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object that represents the current map view."
        },
        {
          "name": "searchLabels",
          "type": "array",
          "description": "An array of search labels used to retrieve axis search results."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Clears the selected region in the row dendrogram.",
        "Clears the selected region in the column dendrogram.",
        "Modifies the sub-ribbon view based on the selected rows and columns."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setSubRibbonView",
      "namespace": "None",
      "signature": "setSubRibbonView(mapItem, startRow, endRow, startCol, endCol)",
      "description": "This is a helper function that sets a sub-ribbon view that best matches a user-selected region of the map. It adjusts the view based on the selection size and orientation.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object that contains the data and properties for the map."
        },
        {
          "name": "startRow",
          "type": "number",
          "description": "The starting row index of the selected region."
        },
        {
          "name": "endRow",
          "type": "number",
          "description": "The ending row index of the selected region."
        },
        {
          "name": "startCol",
          "type": "number",
          "description": "The starting column index of the selected region."
        },
        {
          "name": "endCol",
          "type": "number",
          "description": "The ending column index of the selected region."
        }
      ],
      "side_effects": [
        "Clears previous selection marks and selected regions in SUM.",
        "Updates the mapItem object with new selection details.",
        "Calls DET functions to adjust the detail data size and draw the sub-ribbon view."
      ],
      "returns": {
        "type": "void",
        "description": "Does not return a value."
      }
    },
    {
      "name": "switchPaneToDetail",
      "namespace": "None",
      "signature": "switchPaneToDetail(loc, restoreInfo)",
      "description": "Switches a panel to the detail view, initializing and configuring the detail heat map if necessary.",
      "parameters": [
        {
          "name": "loc",
          "type": "object",
          "description": "Location object containing pane information."
        },
        {
          "name": "restoreInfo",
          "type": "object",
          "description": "Optional object containing information to restore the pane state."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the DOM by appending a cloned detail heat map.",
        "Updates global variable DMM.nextMapNumber.",
        "Sets pane client icons and pane title.",
        "Registers pane event handlers.",
        "Updates dataset attributes of the pane."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "Does not return a value."
      }
    },
    {
      "name": "constructDetailMapDOMTemplate",
      "namespace": "None",
      "signature": "constructDetailMapDOMTemplate()",
      "description": "Constructs a DOM template for a Detail Heat Map and appends it to a div with id 'templates'. This function creates several canvas elements and a labels div, setting various attributes and styles for each element.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Appends a new DOM structure to the element with id 'templates'."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "oncontextmenu",
      "namespace": "colLabels",
      "signature": "colLabels.oncontextmenu(event)",
      "description": "Handles the context menu event for column labels by delegating the event to the DEV.labelRightClick function.",
      "parameters": [
        {
          "name": "event",
          "type": "Event",
          "description": "The context menu event triggered by the user."
        }
      ],
      "side_effects": [
        "Delegates the context menu event to the DEV.labelRightClick function."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "oncontextmenu",
      "namespace": "rowLabels",
      "signature": "rowLabels.oncontextmenu(event)",
      "description": "Handles the context menu event for row labels by delegating the event to the DEV.labelRightClick function.",
      "parameters": [
        {
          "name": "event",
          "type": "Event",
          "description": "The context menu event triggered by the user."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Delegates the context menu event to the DEV.labelRightClick function."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "cloneDetailChm",
      "namespace": "None",
      "signature": "cloneDetailChm(mapNumber)",
      "description": "Clones the HTML element with the ID 'detail_chm', renames its elements based on the provided map number, and returns the cloned element.",
      "parameters": [
        {
          "name": "mapNumber",
          "type": "number",
          "description": "A unique number used to rename the ID and elements of the cloned HTML element."
        }
      ],
      "side_effects": [
        "Modifies the ID and elements of the cloned HTML element."
      ],
      "returns": {
        "type": "HTMLElement",
        "description": "The cloned and modified HTML element."
      }
    },
    {
      "name": "renameElements",
      "namespace": "None",
      "signature": "renameElements(pClone, mapNumber)",
      "description": "Renames the IDs of all elements within a given DOM element (pClone) by appending a map number to each ID. Additionally, it removes certain child elements based on their IDs.",
      "parameters": [
        {
          "name": "pClone",
          "type": "HTMLElement",
          "description": "The parent DOM element whose child elements' IDs will be renamed."
        },
        {
          "name": "mapNumber",
          "type": "number",
          "description": "The number to append to each element's ID."
        }
      ],
      "side_effects": [
        "Modifies the IDs of child elements within the provided parent element.",
        "Removes certain child elements based on their IDs."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "emptyDetailPane",
      "namespace": "None",
      "signature": "emptyDetailPane(loc, elements)",
      "description": "This function empties the detail pane by removing the detail map associated with the given location and then redraws the left canvas box.",
      "parameters": [
        {
          "name": "loc",
          "type": "object",
          "description": "An object representing the location, which contains the pane to be emptied."
        },
        {
          "name": "elements",
          "type": "array",
          "description": "An array of elements that might be associated with the detail pane."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Removes the detail map associated with the given location's pane.",
        "Redraws the left canvas box."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "resizeDetailPane",
      "namespace": "None",
      "signature": "resizeDetailPane(loc)",
      "description": "Resizes the detail pane based on the provided location object. It retrieves the map item associated with the pane, resizes it, and sets a timeout for redrawing the selection.",
      "parameters": [
        {
          "name": "loc",
          "type": "object",
          "description": "An object containing the location details, including the pane ID."
        }
      ],
      "side_effects": [
        "Modifies the map item associated with the provided pane ID.",
        "Sets a timeout for redrawing the selection."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    }
  ]
}