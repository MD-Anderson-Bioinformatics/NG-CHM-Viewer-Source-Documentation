{
  "filename": "DetailHeatMapDisplay.js",
  "namespace": "NgChm.DET",
  "description": [
    "This module is responsible for managing and rendering detailed heat map displays. It handles the initialization, drawing, and updating of detailed heat maps, including the management of covariate bars, dendrograms, and selection boxes. It also provides functions for resizing and restoring the state of the detailed heat map views."
  ],
  "declares_functions_in": [
    "DET"
  ],
  "interacts_with": [
    "NgChm.MAPREP",
    "NgChm.MMGR",
    "NgChm.CMM",
    "NgChm.SRCHSTATE",
    "NgChm.SUM",
    "NgChm.DVW",
    "NgChm.UTIL",
    "NgChm.DRAW",
    "NgChm.UHM",
    "NgChm.Pane"
  ],
  "classes": [],
  "member_variables": [
    {
      "name": "DET.SIZE_NORMAL_MODE",
      "description": "Normal mode size for the detail view."
    },
    {
      "name": "DET.animating",
      "description": "Flag indicating if an animation is in progress."
    },
    {
      "name": "DET.bullet",
      "description": "Bullet character used in legends."
    },
    {
      "name": "DET.dataViewBorder",
      "description": "Border size for the data view."
    },
    {
      "name": "DET.eventTimer",
      "description": "Timer used to delay draw updates."
    },
    {
      "name": "DET.labelLastClicked",
      "description": "Stores the last clicked label for each axis."
    },
    {
      "name": "DET.maxLabelSize",
      "description": "Maximum size for labels."
    },
    {
      "name": "DET.minPixelsForGrid",
      "description": "Minimum element size for grid lines to display."
    },
    {
      "name": "DET.paddingHeight",
      "description": "Space between classification bars."
    },
    {
      "name": "DET.redrawSelectionTimeout",
      "description": "Drawing delay in milliseconds after the view has changed."
    },
    {
      "name": "DET.redrawUpdateTimeout",
      "description": "Drawing delay in milliseconds after a tile update."
    },
    {
      "name": "DET.zoomBoxSizes",
      "description": "Array of zoom box sizes that evenly divide the normal mode size."
    }
  ],
  "global_variables": [],
  "exports": [
    "DET.setDataViewSize",
    "DET.updateSelections",
    "DET.processDetailMapUpdate",
    "DET.setDrawDetailsTimeout",
    "DET.setDrawDetailTimeout",
    "DET.flushDrawingCache",
    "DET.setInitialDetailDisplaySize",
    "DET.callDetailDrawFunction",
    "DET.drawDetailHeatMap",
    "DET.getDetailHeatMap",
    "DET.setDetBoxCanvasSize",
    "DET.getNearestBoxSize",
    "DET.getDetailSaveState",
    "DET.scaleViewWidth",
    "DET.scaleViewHeight",
    "DET.setDetailDataSize",
    "DET.setDetailDataWidth",
    "DET.setDetailDataHeight",
    "DET.clearModeHistory",
    "DET.detailFullMap",
    "DET.detailHRibbon",
    "DET.detailVRibbon",
    "DET.detailNormal",
    "DET.restoreFromSavedState",
    "DET.drawSelections",
    "DET.drawMapItemSelectionsOnScreen",
    "DET.drawMapItemSelectionsOnTarget",
    "DET.detailDrawRowClassBarLabels",
    "DET.detailDrawColClassBarLabels",
    "DET.drawRowAndColLabels",
    "DET.drawRowClassBarLegend",
    "DET.drawColClassBarLegend",
    "DET.removeClassBarLegendElements",
    "DET.setLegendDivElement",
    "DET.removeLabel",
    "DET.addLabelDiv",
    "DET.updateLabelDiv",
    "DET.setDendroShow",
    "DET.colDendroResize",
    "DET.rowDendroResize",
    "DET.getColDendroPixelHeight",
    "DET.getRowDendroPixelWidth",
    "DET.getColClassPixelHeight",
    "DET.getRowClassPixelWidth",
    "DET.detailDrawColClassBars",
    "DET.drawColorPlotColClassBar",
    "DET.drawScatterBarPlotColClassBar",
    "DET.detailDrawRowClassBars",
    "DET.drawColorPlotRowClassBar",
    "DET.drawScatterBarPlotRowClassBar",
    "DET.detailResize",
    "DET.detInitGl"
  ],
  "functions": [
    {
      "name": "setDataViewSize",
      "namespace": "None",
      "signature": "setDataViewSize(mapItem, axis, size)",
      "description": "Set the display size, in canvas units, of the specified axis of the detail map view shown in mapItem. It also multiplies the covariate bar scale factor for that axis by the ratio of the new to old display sizes, preserving the relative sizes of the covariate bars and the heat map view.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object containing the detail map view and its properties."
        },
        {
          "name": "axis",
          "type": "string",
          "description": "The axis of the detail map view to be resized ('row' or 'column')."
        },
        {
          "name": "size",
          "type": "number",
          "description": "The new size for the specified axis in canvas units."
        }
      ],
      "side_effects": [
        "Modifies mapItem.rowClassScale if the axis is 'row'.",
        "Modifies mapItem.dataViewWidth if the axis is 'row'.",
        "Modifies mapItem.colClassScale if the axis is 'column'.",
        "Modifies mapItem.dataViewHeight if the axis is 'column'."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "updateSelections",
      "namespace": "DET",
      "signature": "DET.updateSelections(noResize)",
      "description": "The purpose of this function is to call the updateSelection function for each detail map panel. It optionally takes a parameter to control resizing behavior.",
      "parameters": [
        {
          "name": "noResize",
          "type": "boolean",
          "description": "Optional parameter to control whether resizing should be applied during the update. If provided, it is passed to the updateSelection function of each detail map."
        }
      ],
      "side_effects": [
        "Calls updateSelection on each detail map in DVW.detailMaps.",
        "Sets unapplied changes to true in the heat map managed by MMGR."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "processDetailMapUpdate",
      "namespace": "DET",
      "signature": "DET.processDetailMapUpdate(event, tile)",
      "description": "The purpose of this function is to serve as a callback that is notified every time there is an update to the heat map, such as initialization or new data. This callback draws the summary heat map.",
      "parameters": [
        {
          "name": "event",
          "type": "String",
          "description": "The event type that triggered the callback. Expected to be MMGR.Event_INITIALIZED or other event types."
        },
        {
          "name": "tile",
          "type": "Object",
          "description": "The tile object that represents the specific area of the heat map being updated."
        }
      ],
      "side_effects": [
        "Calls DET.flushDrawingCache(tile) to clear the drawing cache for the specified tile if the event is not MMGR.Event_INITIALIZED."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setDrawDetailsTimeout",
      "namespace": "DET",
      "signature": "DET.setDrawDetailsTimeout(ms, noResize)",
      "description": "The purpose of this function is to call the drawing routine timer for all existing heat map panels.",
      "parameters": [
        {
          "name": "ms",
          "type": "number",
          "description": "The time in milliseconds to set the timeout for drawing details."
        },
        {
          "name": "noResize",
          "type": "boolean",
          "description": "A flag indicating whether to resize the details or not."
        }
      ],
      "side_effects": [
        "Calls DET.setDrawDetailTimeout for each item in DVW.detailMaps."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setDrawDetailTimeout",
      "namespace": "DET",
      "signature": "DET.setDrawDetailTimeout(mapItem, ms, noResize)",
      "description": "The purpose of this function is to redraw a detail heatmap after a specified number of milliseconds to a detail heat map pane. The noResize parameter is used to skip the resize routine and help speed up the drawing routine for some cases. If noResize is true for every call to setDrawDetailTimeout, the resize routine will be skipped on the next redraw.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object that contains the heatmap details and methods."
        },
        {
          "name": "ms",
          "type": "number",
          "description": "The number of milliseconds to wait before redrawing the heatmap."
        },
        {
          "name": "noResize",
          "type": "boolean",
          "description": "Flag to determine whether to skip the resize routine."
        }
      ],
      "side_effects": [
        "Sets mapItem.resizeOnNextDraw to true if noResize is false.",
        "Modifies mapItem.drawEventTimer and mapItem.drawTimeoutStartTime.",
        "Calls DET.drawDetailHeatMap with mapItem and drawWin.win."
      ],
      "returns": {
        "type": "boolean",
        "description": "Returns false if the map item is not visible, otherwise undefined."
      }
    },
    {
      "name": "flushDrawingCache",
      "namespace": "DET",
      "signature": "DET.flushDrawingCache(tile)",
      "description": "The purpose of this function is to process the receipt of a new data tile on the primary heat map panel. It causes any cached heat map affected by the new tile to be redrawn the next time it is displayed. The currently displayed primary heat map will be redrawn after a short delay if it might be affected by the tile.",
      "parameters": [
        {
          "name": "tile",
          "type": "object",
          "description": "The data tile that has been received, which may affect the cached heat map."
        }
      ],
      "side_effects": [
        "Invalidates the cached heat map for the tile's layer if the tile's level matches the cached heat map's level.",
        "Redraws the primary heat map if it might be affected by the new tile."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setInitialDetailDisplaySize",
      "namespace": "DET",
      "signature": "DET.setInitialDetailDisplaySize(mapItem)",
      "description": "Sets the initial detail display sizing (dataPerRow/Col, dataViewHeight/Width) for the heat map based on the number of rows and columns.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "MapItem",
          "description": "The map item object containing the heat map data."
        }
      ],
      "side_effects": [
        "Modifies the detail display size of the heat map in the mapItem object."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "callDetailDrawFunction",
      "namespace": "DET",
      "signature": "DET.callDetailDrawFunction(modeVal, target)",
      "description": "The purpose of this function is to respond to mode changes on the Summary Panel by calling the appropriate detail drawing function. It acts only on the Primary heat map pane.",
      "parameters": [
        {
          "name": "modeVal",
          "type": "String",
          "description": "The mode value that determines which detail drawing function to call."
        },
        {
          "name": "target",
          "type": "Object",
          "description": "The target map item to be used. If undefined, it defaults to DVW.primaryMap."
        }
      ],
      "side_effects": [
        "Modifies the display of the primary heat map pane based on the mode value."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "drawDetailHeatMap",
      "namespace": "DET",
      "signature": "DET.drawDetailHeatMap(mapItem, drawWin)",
      "description": "The purpose of this function is to draw the region of the NGCHM specified by drawWin to a detail heat map pane.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the map item containing heat map data and configuration."
        },
        {
          "name": "drawWin",
          "type": "object",
          "description": "An object specifying the window or layer to be drawn in the detail heat map pane."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies mapItem properties such as resizeOnNextDraw.",
        "Draws the heat map and dendrograms on the WebGL context."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getDetailHeatMap",
      "namespace": "DET",
      "signature": "DET.getDetailHeatMap(mapItem, drawWin, params)",
      "description": "The purpose of this function is to return a renderBuffer containing an image of the region of the NGCHM specified by drawWin rendered using the parameters in params.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item containing heat map data and cache."
        },
        {
          "name": "drawWin",
          "type": "object",
          "description": "The window parameters specifying the region of the heat map to be rendered."
        },
        {
          "name": "params",
          "type": "object",
          "description": "The parameters used for rendering the heat map, including dimensions and colors."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Updates mapItem.detailHeatMapParams with the current view parameters.",
        "Updates mapItem.detailHeatMapValidator with the current parameter check.",
        "Updates mapItem.detailHeatMapLevel with the current drawWin level.",
        "Updates mapItem.detailHeatMapCache with the rendered buffer.",
        "Updates mapItem.detailHeatMapAccessWindow with a new access window."
      ],
      "error_handling": [
        {
          "errorCode": "console.error",
          "description": "Logs an error if the accessWindow value generator returns undefined."
        }
      ],
      "returns": {
        "type": "object",
        "description": "A renderBuffer containing the rendered image of the specified heat map region."
      }
    },
    {
      "name": "isLineACut",
      "namespace": "None",
      "signature": "isLineACut(accessWindow, row)",
      "description": "Return true if and only if the given row/line is a cut (or gap) line. The function memoizes results for efficiency and handles cases where data tiles may not be available.",
      "parameters": [
        {
          "name": "accessWindow",
          "type": "AccessWindow",
          "description": "An object representing the access window containing heat map data and methods to access row values."
        },
        {
          "name": "row",
          "type": "number",
          "description": "A zero-based index within the accessWindow representing the row to check."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Memoizes results in accessWindow.heatMap.datalevels[accessWindow.win.level].isLineACut"
      ],
      "error_handling": [],
      "returns": {
        "type": "boolean",
        "description": "Returns true if the specified row is a cut line, otherwise false."
      }
    },
    {
      "name": "isRowACut",
      "namespace": "None",
      "signature": "isRowACut(row)",
      "description": "Determines if all values in a given row are cut values. A row is considered a cut if all its values are less than or equal to a predefined minimum value.",
      "parameters": [
        {
          "name": "row",
          "type": "number",
          "description": "The index of the row to check. Note that this function uses a 0-based index, but the underlying getRowValues function requires a 1-based index."
        }
      ],
      "side_effects": [
        "Modifies the row index by adding 1 to convert from 0-based to 1-based indexing."
      ],
      "returns": {
        "type": "boolean",
        "description": "Returns true if all values in the row are cut values (i.e., less than or equal to MAPREP.minValues), otherwise returns false."
      }
    },
    {
      "name": "setDetBoxCanvasSize",
      "namespace": "DET",
      "signature": "DET.setDetBoxCanvasSize(mapItem)",
      "description": "Sets the size and position of the detail box canvas to match the dimensions and position of the heat map canvas.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object containing the properties 'boxCanvas' and 'canvas', representing the detail box canvas and the heat map canvas respectively."
        }
      ],
      "side_effects": [
        "Modifies the width and height of mapItem.boxCanvas to match mapItem.canvas.",
        "Aligns the position of mapItem.boxCanvas with mapItem.canvas by setting the 'left' and 'top' styles."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getNearestBoxSize",
      "namespace": "DET",
      "signature": "DET.getNearestBoxSize(mapItem, axis, sizeToGet)",
      "description": "The purpose of this function is to loop through zoomBoxSizes to pick the one that will be large enough to encompass the user-selected area.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item containing heatMap and data view properties."
        },
        {
          "name": "axis",
          "type": "string",
          "description": "The axis to consider, either row or column."
        },
        {
          "name": "sizeToGet",
          "type": "number",
          "description": "The size to get for the box."
        }
      ],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "number",
        "description": "The nearest box size that is large enough to encompass the user-selected area."
      }
    },
    {
      "name": "getDetailSaveState",
      "namespace": "DET",
      "signature": "DET.getDetailSaveState(dm)",
      "description": "Returns the save state required for restoring a detail view. This includes various properties of the detail map such as current column, current row, zoom levels, data box dimensions, and other relevant settings.",
      "parameters": [
        {
          "name": "dm",
          "type": "DetailMap",
          "description": "An object representing the detail map with properties that define the current state of the detail view."
        }
      ],
      "side_effects": [],
      "returns": {
        "type": "object",
        "description": "An object containing the save state of the detail view, including properties like current column, current row, zoom levels, data box dimensions, and other settings."
      }
    },
    {
      "name": "scaleViewWidth",
      "namespace": "DET",
      "signature": "DET.scaleViewWidth(mapItem)",
      "description": "For maps that have fewer rows/columns than the size of the detail panel, this function calculates the appropriate width for matrix elements, ensuring they are scaled properly.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "MapItem",
          "description": "An object representing the map item which contains the heat map and other related data."
        }
      ],
      "side_effects": [
        "Modifies the size of the data view by calling setDataViewSize.",
        "Adjusts the detail data width by calling DET.setDetailDataWidth."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "scaleViewHeight",
      "namespace": "DET",
      "signature": "DET.scaleViewHeight(mapItem)",
      "description": "Adjusts the height of the view for a map item based on the number of rows in the heat map. It scales the height to ensure that matrix elements have an appropriate size, especially when there are fewer rows/columns than the size of the detail panel.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object containing the heat map and other related data."
        }
      ],
      "side_effects": [
        "Modifies the size of the data view for the map item.",
        "Adjusts the detail data height for the map item."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setDetailDataSize",
      "namespace": "DET",
      "signature": "DET.setDetailDataSize(mapItem, size)",
      "description": "The purpose of this function is to determine and set how big each data point should be in a given detail pane.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item for which the detail data size is being set."
        },
        {
          "name": "size",
          "type": "number",
          "description": "The size to set for the detail data."
        }
      ],
      "side_effects": [
        "Calls DET.setDetailDataWidth to set the width of the detail data.",
        "Calls DET.setDetailDataHeight to set the height of the detail data."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setDetailDataWidth",
      "namespace": "DET",
      "signature": "DET.setDetailDataWidth(mapItem, size)",
      "description": "Determines and sets the detail data width for a given detail pane, adjusting the current column based on zoom without exceeding the heat map matrix dimensions.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object containing details about the data view and its properties."
        },
        {
          "name": "size",
          "type": "number",
          "description": "The new width size to set for the detail data box."
        }
      ],
      "side_effects": [
        "Updates mapItem.dataBoxWidth with the new size.",
        "Calls DVW.setDataPerRowFromDet to update data per row based on the new width.",
        "Adjusts mapItem.currentCol based on the zoom level and previous data per row.",
        "Calls DVW.checkCol to ensure the current column is within valid bounds."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setDetailDataHeight",
      "namespace": "DET",
      "signature": "DET.setDetailDataHeight(mapItem, size)",
      "description": "Determines and sets the detail data height for a given detail pane.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object containing details about the data view and its properties."
        },
        {
          "name": "size",
          "type": "number",
          "description": "The new height size to set for the detail data box."
        }
      ],
      "side_effects": [
        "Modifies the dataBoxHeight property of mapItem.",
        "Updates the dataPerCol property of mapItem.",
        "Adjusts the currentRow property of mapItem based on the new dataPerCol value.",
        "Calls DVW.setDataPerColFromDet to update data per column.",
        "Calls DVW.checkRow to validate the current row."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "clearModeHistory",
      "namespace": "DET",
      "signature": "DET.clearModeHistory(mapItem)",
      "description": "Clears the mode history of the provided map item. This should be done every time the user explicitly changes the zoom mode.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item whose mode history is to be cleared."
        }
      ],
      "side_effects": [
        "Resets the modeHistory property of the mapItem to an empty array."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "detailFullMap",
      "namespace": "DET",
      "signature": "DET.detailFullMap(mapItem)",
      "description": "The purpose of this function is to show the whole map in the detail pane. It processes ribbon horizontal/vertical modes differently, keeping one axis static so that the 'full view' stays within the selected sub-dendrogram.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "MapItem",
          "description": "An object representing the map to be displayed in the detail pane. It contains properties such as currentRow, currentCol, mode, selectedStart, dataPerCol, dataPerRow, and heatMap."
        }
      ],
      "side_effects": [
        "Modifies mapItem.saveRow and mapItem.saveCol to store the current row and column.",
        "May modify mapItem.selectedStart to 0.",
        "Clears selected regions in SUM.rowDendro and SUM.colDendro if they exist.",
        "Sets the mode of mapItem to 'FULL_MAP'.",
        "Adjusts the canvas dimensions to fit the number of rows/columns and matrix height/width of each element."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setCanvasDimensions",
      "namespace": "None",
      "signature": "setCanvasDimensions(mapItem)",
      "description": "Sets the dimensions of the canvas (width and height) based on the current data view size and the size of the currently visible covariate bars.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object containing the canvas and data view properties, as well as methods to get the scaled visible covariates."
        }
      ],
      "side_effects": [
        "Modifies the width and height properties of the canvas within the mapItem object."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "detailHRibbon",
      "namespace": "DET",
      "signature": "DET.detailHRibbon(mapItem, restoreInfo)",
      "description": "Changes the view for a given heat map panel to horizontal ribbon view. Supports both full ribbon view and sub-selection ribbon view based on dendrogram selection.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The heat map panel object containing various properties and methods for manipulating the heat map view."
        },
        {
          "name": "restoreInfo",
          "type": "boolean",
          "description": "Flag indicating whether to restore previous view settings."
        }
      ],
      "side_effects": [
        "Modifies the mode, dataBoxWidth, saveCol, currentCol, and currentRow properties of mapItem.",
        "Calls several functions to adjust the view size and dimensions.",
        "Updates the selection on the mapItem."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "detailVRibbon",
      "namespace": "DET",
      "signature": "DET.detailVRibbon(mapItem, restoreInfo)",
      "description": "Changes the view for a given heat map panel to vertical ribbon view. It supports both a full ribbon view and a sub-selection ribbon view based on user interaction with the dendrogram. If restoring from a saved state, it sets the view's mode and related state to the desired values.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The heat map panel object containing the current view state and data."
        },
        {
          "name": "restoreInfo",
          "type": "boolean",
          "description": "Indicates whether the view is being restored from a saved state."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Changes the mode and state of the heat map panel view.",
        "Updates the dimensions and layout of the data view.",
        "Adjusts the viewport content attribute if the viewport element is present."
      ],
      "error_handling": [
        {
          "errorCode": "Error",
          "description": "Logs an error message if unable to adjust the viewport content attribute."
        }
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "detailNormal",
      "namespace": "DET",
      "signature": "DET.detailNormal(mapItem, restoreInfo)",
      "description": "Handles all the processing necessary to return a heat map panel to normal mode.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The detail view map item."
        },
        {
          "name": "restoreInfo",
          "type": "boolean",
          "description": "Flag indicating whether to restore previous information."
        }
      ],
      "side_effects": [
        "Changes the mode of the mapItem to 'NORMAL'.",
        "Adjusts the data view size and detail data size based on the previous mode.",
        "Updates the current row and column of the mapItem based on the previous mode.",
        "Sets the canvas dimensions and initializes GL for the mapItem.",
        "Clears dendrogram selection and updates the selection of the mapItem.",
        "Attempts to adjust the viewport content attribute."
      ],
      "error_handling": [
        {
          "errorCode": "Error",
          "description": "Logs an error message if unable to adjust the viewport content attribute."
        }
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "clearDendroSelection",
      "namespace": "None",
      "signature": "clearDendroSelection(mapItem)",
      "description": "Clears any dendrogram selection or restricted region for the specified mapItem. If the mapItem is the current primary map, it also clears any selection on the dendrograms of the summary map.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object for which the dendrogram selection needs to be cleared."
        }
      ],
      "side_effects": [
        "Resets selectedStart, selectedStop, and selectedIsDendrogram properties of mapItem to their default values.",
        "If mapItem is the primary map, clears selected regions on the row and column dendrograms of the summary map.",
        "Redraws the row and column dendrograms of the summary map if they are shown."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "restoreFromSavedState",
      "namespace": "DET",
      "signature": "DET.restoreFromSavedState(mapItem, savedState)",
      "description": "Restores the detail view of a map item from a previously saved state, including various properties and view modes.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object that will have its state restored."
        },
        {
          "name": "savedState",
          "type": "object",
          "description": "The object containing the saved state properties to be restored."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies properties of the mapItem object to match the saved state.",
        "Calls DET.setDataViewSize to adjust the data view size.",
        "Calls DET.detailVRibbon, DET.detailHRibbon, DET.detailFullMap, or DET.detailNormal based on the saved state mode."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "drawSelections",
      "namespace": "DET",
      "signature": "DET.drawSelections()",
      "description": "This function iterates through the detail maps and calls a function to draw item selections on the screen. It processes the selected ranges and draws lines or boxes on the heatMap detail box canvas based on the selection arrays.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the visual representation of the detail maps by drawing selections on the screen."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "drawMapItemSelectionsOnScreen",
      "namespace": "None",
      "signature": "drawMapItemSelectionsOnScreen(mapItem)",
      "description": "The function draws the detail map selections on the mapItem's boxCanvas.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the map item which contains the boxCanvas property."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "drawMapItemSelectionsOnTarget",
      "namespace": "None",
      "signature": "function drawMapItemSelectionsOnTarget(mapItem, target)",
      "description": "This function draws a thin black line around the entire detail map and thicker selection color lines around any selection rectangles visible in that detail map. It uses the provided target canvas to draw these rectangles.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "MapItem",
          "description": "The map item containing the heat map and related data."
        },
        {
          "name": "target",
          "type": "CanvasTarget",
          "description": "The canvas-like target onto which the rectangles are drawn, including additional properties such as context, width, and height."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Clears the entire target canvas.",
        "Draws borders and selection rectangles on the target canvas.",
        "Logs debug information if the debug flag is set.",
        "Modifies the mapItemVars global variable."
      ],
      "error_handling": [],
      "returns": {
        "type": "MapItemVars",
        "description": "The modified mapItemVars object containing context and other properties."
      }
    },
    {
      "name": "calcMapItemVariables",
      "namespace": "None",
      "signature": "calcMapItemVariables(mapItem, target)",
      "description": "Calculate various variables that depend on the mapItem but not the current search box.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object containing data and configuration for the map."
        },
        {
          "name": "target",
          "type": "object",
          "description": "The target object representing the rendering context and dimensions."
        }
      ],
      "side_effects": [
        "Updates the global mapItemVars object with calculated values.",
        "If debug mode is enabled, initializes debug-related variables in mapItemVars."
      ],
      "returns": {
        "type": "void",
        "description": "Does not return a value."
      }
    },
    {
      "name": "calcVisRanges",
      "namespace": "None",
      "signature": "calcVisRanges(axis, ranges, currentPosn, viewScale, viewportStart, viewportEnd, cellSize)",
      "description": "Convert selection ranges into visible ranges. This function calculates which parts of the selection ranges are visible within the current viewport and returns those visible ranges.",
      "parameters": [
        {
          "name": "axis",
          "type": "String",
          "description": "The axis concerned."
        },
        {
          "name": "ranges",
          "type": "Array",
          "description": "An array of selection ranges, each represented as an array of two values [selStart, selEnd]."
        },
        {
          "name": "currentPosn",
          "type": "Number",
          "description": "Start coordinate of the current view for the specified axis."
        },
        {
          "name": "viewScale",
          "type": "Number",
          "description": "Scale factor for the view."
        },
        {
          "name": "viewportStart",
          "type": "Number",
          "description": "Top/left pixel of the viewport."
        },
        {
          "name": "viewportEnd",
          "type": "Number",
          "description": "Bottom/right pixel of the viewport."
        },
        {
          "name": "cellSize",
          "type": "Number",
          "description": "Number of pixels in a cell."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Logs the number of visible ranges found to the console if debug mode is enabled."
      ],
      "error_handling": [],
      "returns": {
        "type": "Array",
        "description": "An array of visible pixel ranges, each represented as an array of two target coordinate values [boxStart, boxEnd]. Only ranges that are at least partially visible are included."
      }
    },
    {
      "name": "calcVisColRanges",
      "namespace": "None",
      "signature": "calcVisColRanges(ranges, widthScale, mapItem)",
      "description": "Convert column selection ranges into column visible ranges.",
      "parameters": [
        {
          "name": "ranges",
          "type": "Array",
          "description": "An array of selection ranges to be converted."
        },
        {
          "name": "widthScale",
          "type": "Number",
          "description": "The scale factor for the width of the columns."
        },
        {
          "name": "mapItem",
          "type": "Object",
          "description": "An object containing the current column and other related properties."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "Array",
        "description": "An array of visible ranges for the columns."
      }
    },
    {
      "name": "calcVisRowRanges",
      "namespace": "None",
      "signature": "calcVisRowRanges(ranges, heightScale, mapItem)",
      "description": "Converts row selection ranges into row visible ranges by utilizing the calcVisRanges function with specific parameters for rows.",
      "parameters": [
        {
          "name": "ranges",
          "type": "Array",
          "description": "An array of selection ranges to be converted into visible ranges."
        },
        {
          "name": "heightScale",
          "type": "Number",
          "description": "The scale factor for the height of the rows."
        },
        {
          "name": "mapItem",
          "type": "Object",
          "description": "An object containing the current row and other related properties."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "Array",
        "description": "An array of visible ranges for the rows."
      }
    },
    {
      "name": "drawSearchBox",
      "namespace": "None",
      "signature": "drawSearchBox(mapItem, boxY, boxY2, boxX, boxX2)",
      "description": "The purpose of this function is to draw the search box on a given heat map panel. At least one edge of the box should be visible.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object containing the context and other properties for drawing."
        },
        {
          "name": "boxY",
          "type": "number",
          "description": "The Y-coordinate of the top edge of the search box."
        },
        {
          "name": "boxY2",
          "type": "number",
          "description": "The Y-coordinate of the bottom edge of the search box."
        },
        {
          "name": "boxX",
          "type": "number",
          "description": "The X-coordinate of the left edge of the search box."
        },
        {
          "name": "boxX2",
          "type": "number",
          "description": "The X-coordinate of the right edge of the search box."
        }
      ],
      "side_effects": [
        "Increments mapItemVars.strokes if debug mode is enabled.",
        "Draws lines on the mapItemVars.ctx context."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "isHorizLineVisible",
      "namespace": "None",
      "signature": "isHorizLineVisible(boxY)",
      "description": "Determines if a horizontal line at a given Y-coordinate is visible within the boundaries defined by mapItemVars.",
      "parameters": [
        {
          "name": "boxY",
          "type": "number",
          "description": "The Y-coordinate of the horizontal line to check for visibility."
        }
      ],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "boolean",
        "description": "Returns true if the horizontal line at the given Y-coordinate is visible within the defined boundaries; otherwise, false."
      }
    },
    {
      "name": "isVertLineVisible",
      "namespace": "None",
      "signature": "isVertLineVisible(boxX)",
      "description": "Determines if a vertical line at a given x-coordinate is visible within the boundaries defined by mapItemVars.",
      "parameters": [
        {
          "name": "boxX",
          "type": "number",
          "description": "The x-coordinate of the vertical line to check for visibility."
        }
      ],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "boolean",
        "description": "Returns true if the vertical line at the given x-coordinate is visible within the defined boundaries; otherwise, returns false."
      }
    },
    {
      "name": "drawHorizLine",
      "namespace": "None",
      "signature": "drawHorizLine(boxX, boxX2, boxY)",
      "description": "The purpose of this function is to draw a horizontal line on a given heat map panel. It ensures the line starts and ends within the bounds defined by the topX variable from the mapItemVars object.",
      "parameters": [
        {
          "name": "boxX",
          "type": "number",
          "description": "The starting x-coordinate of the horizontal line."
        },
        {
          "name": "boxX2",
          "type": "number",
          "description": "The ending x-coordinate of the horizontal line."
        },
        {
          "name": "boxY",
          "type": "number",
          "description": "The y-coordinate of the horizontal line."
        }
      ],
      "side_effects": [
        "Draws a horizontal line on the heat map panel."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "drawVertLine",
      "namespace": "None",
      "signature": "drawVertLine(boxY, boxY2, boxX)",
      "description": "The purpose of this function is to draw a vertical line on a given heat map panel. It ensures the line is drawn within the bounds of the heat map by comparing the provided coordinates with the top boundary of the map.",
      "parameters": [
        {
          "name": "boxY",
          "type": "number",
          "description": "The starting Y-coordinate for the vertical line."
        },
        {
          "name": "boxY2",
          "type": "number",
          "description": "The ending Y-coordinate for the vertical line."
        },
        {
          "name": "boxX",
          "type": "number",
          "description": "The X-coordinate for the vertical line."
        }
      ],
      "side_effects": [
        "Draws a vertical line on the heat map panel."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "strokeLine",
      "namespace": "None",
      "signature": "strokeLine(fromX, fromY, toX, toY)",
      "description": "This function draws a line on the target canvas context from the starting coordinates (fromX, fromY) to the ending coordinates (toX, toY).",
      "parameters": [
        {
          "name": "fromX",
          "type": "number",
          "description": "The x-coordinate of the starting point of the line."
        },
        {
          "name": "fromY",
          "type": "number",
          "description": "The y-coordinate of the starting point of the line."
        },
        {
          "name": "toX",
          "type": "number",
          "description": "The x-coordinate of the ending point of the line."
        },
        {
          "name": "toY",
          "type": "number",
          "description": "The y-coordinate of the ending point of the line."
        }
      ],
      "side_effects": [
        "Modifies the canvas context by moving the drawing cursor and drawing a line."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "sizeCanvasForLabels",
      "namespace": "None",
      "signature": "sizeCanvasForLabels(mapItem)",
      "description": "Resize the row heat map canvas for the specified heat map panel instance. It sets the sizes of the main canvas, the box canvas, and the row/col label DIVs. It calculates and adjusts the size of the detail canvas and box canvas in order to best accommodate the maximum label sizes for each axis.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The heat map panel instance containing the canvas and label details."
        }
      ],
      "side_effects": [
        "Resets label lengths for the mapItem.",
        "Calculates and sets row and column labels for the mapItem.",
        "Adjusts the viewport for the mapItem."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setViewPort",
      "namespace": "None",
      "signature": "setViewPort(mapItem)",
      "description": "This function resizes the heat map, row label, and column label canvases for a given mapItem, which represents an open detail heat map panel. It sets the sizes of the main canvas, the box canvas, and the row/col label DIVs.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the detail heat map panel, containing properties such as chm, rowDendro, colDendro, canvas, boxCanvas, rowLabelDiv, colLabelDiv, rowLabelLen, and colLabelLen."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the size and position of the main canvas, box canvas, and row/col label DIVs within the detail heat map panel."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "calcRowAndColLabels",
      "namespace": "None",
      "signature": "calcRowAndColLabels(mapItem)",
      "description": "This function determines if labels are to be drawn on each axis and calls the appropriate function to calculate the maximum label size for each axis.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object containing properties related to the map, including row and column label fonts."
        }
      ],
      "side_effects": [
        "Modifies mapItem.rowLabelFont to store the calculated row label font size.",
        "Modifies mapItem.colLabelFont to store the calculated column label font size."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "calcClassRowAndColLabels",
      "namespace": "None",
      "signature": "calcClassRowAndColLabels(mapItem)",
      "description": "This function calls the functions necessary to calculate the maximum row and column class bar label sizes and update maximum label size variables if necessary.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object containing data for which the row and column labels need to be calculated."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Updates maximum label size variables if necessary."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "calcCovariateBarLabels",
      "namespace": "None",
      "signature": "calcCovariateBarLabels(mapItem, axis)",
      "description": "This function calculates the maximum size of all covariate bar labels for the specified axis and updates the map item's label length for the axis if the value of any label exceeds the existing maximum.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "MapItem",
          "description": "The map item object containing the covariate bars and related methods."
        },
        {
          "name": "axis",
          "type": "String",
          "description": "The axis for which the covariate bar labels are being calculated."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Updates the covariate bar label font for the specified axis in the map item.",
        "Adds temporary labels for size calculation.",
        "Calculates and updates the label division for the other axis."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "calcCovariateBarLabelFont",
      "namespace": "None",
      "signature": "calcCovariateBarLabelFont(mapItem, axis, bars)",
      "description": "This function calculates the font size of the smallest visible covariate bar labels on the specified axis. It returns 0 if none are visible.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item containing the canvas and data view dimensions."
        },
        {
          "name": "axis",
          "type": "string",
          "description": "The axis on which the covariate bars are drawn."
        },
        {
          "name": "bars",
          "type": "array",
          "description": "An array of bar objects, each representing a covariate bar."
        }
      ],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "number",
        "description": "The font size of the smallest visible covariate bar labels. Returns 0 if none are visible."
      }
    },
    {
      "name": "addTmpLabelForSizeCalc",
      "namespace": "None",
      "signature": "addTmpLabelForSizeCalc(mapItem, text, fontSize)",
      "description": "This function adds an entry to tmpLabelSizeElements for the specified text and fontSize. If the combination of text and fontSize has not been seen before, a pool label element for performing the width calculation is also created.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object that contains label size cache and temporary label size elements."
        },
        {
          "name": "text",
          "type": "string",
          "description": "The text for which the label size needs to be calculated."
        },
        {
          "name": "fontSize",
          "type": "number",
          "description": "The font size of the text."
        }
      ],
      "side_effects": [
        "Modifies mapItem.tmpLabelSizeElements by adding a new entry.",
        "Appends a new label element to mapItem.labelElement if the text and fontSize combination is new."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getPoolElement",
      "namespace": "None",
      "signature": "getPoolElement(mapItem)",
      "description": "This function retrieves a 'labelSizeWidthCalc' div element from the pool if available. If the pool is empty, it creates and returns a new div element with specific styles and class name.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object that contains the 'labelSizeWidthCalcPool' array from which the div element is retrieved."
        }
      ],
      "side_effects": [
        "Modifies the 'labelSizeWidthCalcPool' array by removing the last element if the pool is not empty."
      ],
      "returns": {
        "type": "HTMLElement",
        "description": "A div element either retrieved from the pool or newly created with specific styles and class name."
      }
    },
    {
      "name": "calcAxisLabelsLen",
      "namespace": "None",
      "signature": "calcAxisLabelsLen(mapItem, axis, fontSize)",
      "description": "This function calculates the maximum label length (in CSS coordinates) for the current labels on the specified axis.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the map item containing data and canvas properties."
        },
        {
          "name": "axis",
          "type": "string",
          "description": "The axis for which the label lengths are being calculated. It can be either 'row' or 'column'."
        },
        {
          "name": "fontSize",
          "type": "number",
          "description": "The font size used for the labels."
        }
      ],
      "side_effects": [
        "Modifies the mapItem object by adding temporary labels for size calculation.",
        "Calls calcLabelDiv to finalize label size calculations."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "calcLabelDiv",
      "namespace": "None",
      "signature": "calcLabelDiv(mapItem, axis)",
      "description": "This function assesses the size of the entries that have been added to tmpLabelSizeElements and increases the row/col label length if the longest label is longer than those already processed. rowLabelLen and colLabelLen are used to size the detail screen to accommodate labels on both axes.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object containing label size information and temporary label elements."
        },
        {
          "name": "axis",
          "type": "string",
          "description": "The axis ('row' or 'col') to determine which label length to update."
        }
      ],
      "side_effects": [
        "Updates mapItem.rowLabelLen or mapItem.colLabelLen based on the longest label found.",
        "Removes temporary label elements from the DOM and returns them to the labelSizeWidthCalcPool."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "calcAxisLabelFontSize",
      "namespace": "None",
      "signature": "calcAxisLabelFontSize(mapItem, axis)",
      "description": "This function calculates the font size to be used for matrix labels on the specified axis of mapItem. It determines the appropriate font size based on the size of the data view, dendrogram, and covariate bars in CSS coordinates, ensuring that labels are appropriately spaced.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "MapItem",
          "description": "An object representing the map item containing data view, canvas, and label elements."
        },
        {
          "name": "axis",
          "type": "String",
          "description": "The axis for which the label font size is being calculated. It can be either 'row' or 'column'."
        }
      ],
      "side_effects": [
        "Modifies the fontSizeMap by adding a new font size if it does not already exist.",
        "Temporarily adds and removes a label element to/from the mapItem for size calculation."
      ],
      "returns": {
        "type": "Number",
        "description": "The calculated font size for the axis labels in points."
      }
    },
    {
      "name": "updateDisplayedLabels",
      "namespace": "DET",
      "signature": "DET.updateDisplayedLabels()",
      "description": "This function updates detail labels when the user scrolls or zooms on the detail pane. It iterates through the detail maps and updates the labels accordingly.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Updates the labels in the detail maps by calling the updateMapItemLabels function."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "updateMapItemLabels",
      "namespace": "None",
      "signature": "updateMapItemLabels(mapItem)",
      "description": "Updates the labels of a map item by temporarily hiding the label element, updating existing labels, drawing new labels, and removing old dynamic labels that were not updated.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object whose labels are to be updated. It contains properties like labelElements, oldLabelElements, and labelElement."
        }
      ],
      "side_effects": [
        "Temporarily hides the labelElement of the mapItem while updating labels.",
        "Modifies the labelElements and oldLabelElements properties of the mapItem.",
        "Removes old dynamic labels that were not updated.",
        "Restores the visibility of the labelElement after updating."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "drawRowAndColLabels",
      "namespace": "DET",
      "signature": "DET.drawRowAndColLabels(mapItem)",
      "description": "This function determines if labels are to be drawn on each axis and calls the appropriate function to draw those labels on the screen.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object containing properties related to the map, including rowLabelFont and colLabelFont."
        }
      ],
      "side_effects": [
        "Calls drawAxisLabels to render labels on the screen."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "drawAxisLabels",
      "namespace": "None",
      "signature": "drawAxisLabels(mapItem, axis, fontSize)",
      "description": "This function draws all axis labels for the specified axis of mapItem. Labels are drawn at absolute positions on a special labelElement DIV within the mapItem pane. It determines the correct position to draw the labels by converting label indices into label coordinates in CSS coordinates.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "MapItem",
          "description": "The map item object containing the data and canvas for drawing labels."
        },
        {
          "name": "axis",
          "type": "String",
          "description": "The axis for which the labels are to be drawn ('row' or 'column')."
        },
        {
          "name": "fontSize",
          "type": "Number",
          "description": "The font size to be used for the labels."
        }
      ],
      "side_effects": [
        "Modifies the DOM by adding label DIV elements to the mapItem's labelElement."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "resetLabelLengths",
      "namespace": "None",
      "signature": "resetLabelLengths(mapItem)",
      "description": "This function resets the maximum label size variables for each axis in preparation for a screen redraw.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the map item whose label lengths are to be reset."
        }
      ],
      "side_effects": [
        "Resets the rowLabelLen and colLabelLen properties of the mapItem object to 0."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "detailDrawRowClassBarLabels",
      "namespace": "DET",
      "signature": "DET.detailDrawRowClassBarLabels(mapItem)",
      "description": "This function draws row class bar labels on the detail panel. It positions the labels based on the visible row covariates and scales them according to the canvas dimensions. It also handles the display of indicators for hidden row covariate bars.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "MapItem",
          "description": "An object containing the map and covariate bar details, including dimensions, labels, and visibility status."
        }
      ],
      "side_effects": [
        "Modifies the DOM to add label elements for row class bars.",
        "Removes existing class bar legend elements.",
        "Adds indicators for hidden row covariate bars."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "detailDrawColClassBarLabels",
      "namespace": "DET",
      "signature": "DET.detailDrawColClassBarLabels(mapItem)",
      "description": "This function draws labels for visible column covariates on the detail panel. It also handles the display of indicators for hidden column covariate bars, if any.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object containing properties and methods related to the map and its visualization, including canvas dimensions, label elements, and covariate data."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the DOM to add or remove label elements for column covariates.",
        "Updates the position and visibility of labels based on the current state of the mapItem object."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "drawCovariateBarLegends",
      "namespace": "None",
      "signature": "drawCovariateBarLegends(mapItem, axis)",
      "description": "This function draws all covariate bar legends for the specified axis on the specified detail panel for maps that contain bar/scatter plot covariates. It calls a second function (drawRowClassBarLegend or drawColClassBarLegend) to draw each legend.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "MapItem",
          "description": "The map item containing the covariate bars to be drawn."
        },
        {
          "name": "axis",
          "type": "String",
          "description": "The axis on which the covariate bar legends are to be drawn."
        }
      ],
      "side_effects": [
        "Draws covariate bar legends on the specified axis of the map item."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "drawRowClassBarLegend",
      "namespace": "DET",
      "signature": "DET.drawRowClassBarLegend(mapItem, currentClassBar, barStartPosn, totalHeight)",
      "description": "This function draws a specific row class bar legend on the detail panel for maps that contain bar/scatter plot covariates. It calculates the positions and values for the legend and creates div elements to display these values.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item containing the canvas and other properties needed for drawing the legend."
        },
        {
          "name": "currentClassBar",
          "type": "object",
          "description": "The current class bar object containing properties like height, high_bound, low_bound, and label."
        },
        {
          "name": "barStartPosn",
          "type": "number",
          "description": "The starting position of the current class bar."
        },
        {
          "name": "totalHeight",
          "type": "number",
          "description": "The total height of all the covariate bars."
        }
      ],
      "side_effects": [
        "Creates div elements to display the legend values on the detail panel."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "drawColClassBarLegend",
      "namespace": "DET",
      "signature": "DET.drawColClassBarLegend(mapItem, currentClassBar, startPosn, totalHeight)",
      "description": "This function draws a specific column class bar legend on the detail panel for maps that contain bar/scatter plot covariates.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item containing the canvas and data view height information."
        },
        {
          "name": "currentClassBar",
          "type": "object",
          "description": "The current class bar object containing height, high_bound, low_bound, and label properties."
        },
        {
          "name": "startPosn",
          "type": "number",
          "description": "The starting position of the current class bar."
        },
        {
          "name": "totalHeight",
          "type": "number",
          "description": "The total height of all class bars."
        }
      ],
      "side_effects": [
        "Creates and positions legend div elements on the map item's canvas."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "removeClassBarLegendElements",
      "namespace": "DET",
      "signature": "DET.removeClassBarLegendElements(key, mapItem)",
      "description": "This function removes any existing legend elements for a bar/scatter plot class bar that is being redrawn.",
      "parameters": [
        {
          "name": "key",
          "type": "String",
          "description": "A unique identifier used to locate the legend elements."
        },
        {
          "name": "mapItem",
          "type": "Object",
          "description": "An object containing the panel number used to construct the element IDs."
        }
      ],
      "side_effects": [
        "Removes elements from the DOM with IDs constructed from the key and mapItem.panelNbr."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setLegendDivElement",
      "namespace": "DET",
      "signature": "DET.setLegendDivElement(mapItem, itemId, boundVal, topVal, leftVal, isRowVal)",
      "description": "This function sets the position for a bar/scatter plot covariates legend on the detail panel. It creates a new div element if it doesn't already exist, sets its content and styles, and appends it to the provided map item.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object to which the legend div element will be appended."
        },
        {
          "name": "itemId",
          "type": "string",
          "description": "The ID of the legend div element."
        },
        {
          "name": "boundVal",
          "type": "string",
          "description": "The value to be displayed inside the legend div element."
        },
        {
          "name": "topVal",
          "type": "number",
          "description": "The top position (in pixels) for the legend div element."
        },
        {
          "name": "leftVal",
          "type": "number",
          "description": "The left position (in pixels) for the legend div element."
        },
        {
          "name": "isRowVal",
          "type": "boolean",
          "description": "A flag indicating whether the legend is for row covariates (true) or column covariates (false)."
        }
      ],
      "side_effects": [
        "Creates a new div element if it doesn't already exist.",
        "Appends the created div element to the map item's labelElement.",
        "Modifies the style and position of the legend div element."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "removeLabel",
      "namespace": "DET",
      "signature": "DET.removeLabel(mapItem, label)",
      "description": "This function removes a label from a specific detail map item by deleting the corresponding DOM element and removing the label from the map item's oldLabelElements property.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object from which the label should be removed. This object contains the oldLabelElements property."
        },
        {
          "name": "label",
          "type": "string",
          "description": "The label to be removed from the map item."
        }
      ],
      "side_effects": [
        "Removes the DOM element associated with the label from its parent.",
        "Deletes the label from the mapItem.oldLabelElements property."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "addLabelDiv",
      "namespace": "DET",
      "signature": "DET.addLabelDiv(mapItem, parent, id, className, text, longText, left, top, fontSize, rotate, index, axis, xy)",
      "description": "This function adds a label div element to a specific detail map item. It either updates an existing label or creates a new one with various properties and event listeners.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object containing label elements and callbacks."
        },
        {
          "name": "parent",
          "type": "HTMLElement",
          "description": "The parent HTML element to which the label div will be appended."
        },
        {
          "name": "id",
          "type": "string",
          "description": "The unique identifier for the label div."
        },
        {
          "name": "className",
          "type": "string",
          "description": "The class name to be assigned to the label div."
        },
        {
          "name": "text",
          "type": "string",
          "description": "The text content of the label div."
        },
        {
          "name": "longText",
          "type": "string",
          "description": "The long text content for tooltip or additional information."
        },
        {
          "name": "left",
          "type": "number",
          "description": "The left position (in pixels) of the label div."
        },
        {
          "name": "top",
          "type": "number",
          "description": "The top position (in pixels) of the label div."
        },
        {
          "name": "fontSize",
          "type": "number",
          "description": "The font size (in points) of the label text."
        },
        {
          "name": "rotate",
          "type": "string",
          "description": "Indicates if the label should be rotated ('T' for true)."
        },
        {
          "name": "index",
          "type": "string",
          "description": "The index data attribute for the label div."
        },
        {
          "name": "axis",
          "type": "string",
          "description": "The axis data attribute for the label div."
        },
        {
          "name": "xy",
          "type": "string",
          "description": "Additional coordinate information for the label div."
        }
      ],
      "side_effects": [
        "Updates or creates a label div element in the DOM.",
        "Adds event listeners for click, context menu, mouseover, mouseleave, touchstart, touchend, and touchmove events.",
        "Modifies the mapItem object by adding or updating label elements."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onmouseover",
      "namespace": "div",
      "signature": "div.onmouseover()",
      "description": "This function is triggered when the mouse pointer moves over the 'div' element. It calls the 'UHM.hlp' function with specific parameters.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls the UHM.hlp function with the current 'div' element, 'longText', the length of 'longText' multiplied by 9, and 0 as arguments."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "updateLabelDiv",
      "namespace": "DET",
      "signature": "DET.updateLabelDiv(mapItem, parent, id, className, text, longText, left, top, fontSize, rotate, index, axis, xy)",
      "description": "This function updates a label DIV and removes it from the oldLabelElements array if it is no longer visible on the detail panel.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item containing label elements."
        },
        {
          "name": "parent",
          "type": "HTMLElement",
          "description": "The parent HTML element of the label."
        },
        {
          "name": "id",
          "type": "string",
          "description": "The unique identifier for the label."
        },
        {
          "name": "className",
          "type": "string",
          "description": "The class name to be applied to the label."
        },
        {
          "name": "text",
          "type": "string",
          "description": "The text content of the label."
        },
        {
          "name": "longText",
          "type": "string",
          "description": "The long text content of the label."
        },
        {
          "name": "left",
          "type": "number",
          "description": "The left position of the label in pixels."
        },
        {
          "name": "top",
          "type": "number",
          "description": "The top position of the label in pixels."
        },
        {
          "name": "fontSize",
          "type": "number",
          "description": "The font size of the label in points."
        },
        {
          "name": "rotate",
          "type": "number",
          "description": "The rotation angle of the label."
        },
        {
          "name": "index",
          "type": "number",
          "description": "The index of the label."
        },
        {
          "name": "axis",
          "type": "string",
          "description": "The axis information for the label."
        },
        {
          "name": "xy",
          "type": "object",
          "description": "The coordinates of the label."
        }
      ],
      "side_effects": [
        "Updates the mapItem.labelElements and mapItem.oldLabelElements objects.",
        "Logs a message if there is a mismatch during the update."
      ],
      "returns": {
        "type": "void",
        "description": "Does not return a value."
      }
    },
    {
      "name": "setDendroShow",
      "namespace": "DET",
      "signature": "DET.setDendroShow(mapItem)",
      "defined_section": "DENDROGRAM RELATED DETAIL DISPLAY FUNCTIONS",
      "description": "Sets the display height and width for row and column dendrograms for a given heat map panel.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the heat map panel, which includes properties for heat map and dendrogram dimensions."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies mapItem.dendroWidth based on the row dendrogram configuration.",
        "Modifies mapItem.dendroHeight based on the column dendrogram configuration."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "colDendroResize",
      "namespace": "DET",
      "signature": "DET.colDendroResize(mapItem, drawIt)",
      "description": "This function resizes the column dendrogram of the specified detail heat map panel instance.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The detail heat map panel instance containing the column dendrogram to be resized."
        },
        {
          "name": "drawIt",
          "type": "boolean",
          "description": "Flag indicating whether to redraw the dendrogram after resizing."
        }
      ],
      "side_effects": [
        "Modifies the style properties of the column dendrogram canvas.",
        "Potentially redraws the column dendrogram if drawIt is true."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "rowDendroResize",
      "namespace": "DET",
      "signature": "DET.rowDendroResize(mapItem, drawIt)",
      "description": "This function resizes the row dendrogram of the specified detail heat map panel instance.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The detail heat map panel instance containing the row dendrogram to be resized."
        },
        {
          "name": "drawIt",
          "type": "boolean",
          "description": "Flag indicating whether to redraw the dendrogram after resizing."
        }
      ],
      "side_effects": [
        "Modifies the style properties (top, width, height) of the row dendrogram canvas.",
        "Calls the draw method of the row dendrogram if drawIt is true."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getColDendroPixelHeight",
      "namespace": "DET",
      "signature": "DET.getColDendroPixelHeight(mapItem)",
      "description": "The purpose of this function is to get the pixel height of the column dendrogram based on the provided map item.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object containing properties of the map, including canvas dimensions and dendrogram height."
        }
      ],
      "returns": {
        "type": "number",
        "description": "The pixel height of the column dendrogram."
      }
    },
    {
      "name": "getRowDendroPixelWidth",
      "namespace": "DET",
      "signature": "DET.getRowDendroPixelWidth(mapItem)",
      "description": "The purpose of this function is to get the pixel width of the row dendrogram.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object containing properties of the map, including canvas dimensions and dendrogram width."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "number",
        "description": "The pixel width of the row dendrogram."
      }
    },
    {
      "name": "getColClassPixelHeight",
      "namespace": "DET",
      "signature": "DET.getColClassPixelHeight(mapItem)",
      "description": "The purpose of this function is to calculate and return the pixel height of column covariate bars based on the scaled visible covariates and the canvas dimensions.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the map item which contains methods to get scaled visible covariates and canvas dimensions."
        }
      ],
      "returns": {
        "type": "number",
        "description": "The pixel height of the column covariate bars."
      }
    },
    {
      "name": "getRowClassPixelWidth",
      "namespace": "DET",
      "signature": "DET.getRowClassPixelWidth(mapItem)",
      "description": "Calculates the pixel width of row covariate bars based on the scaled visible covariates and the canvas dimensions.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the map item which contains methods to get scaled visible covariates and canvas dimensions."
        }
      ],
      "returns": {
        "type": "number",
        "description": "The calculated pixel width of the row covariate bars."
      }
    },
    {
      "name": "detailDrawColClassBars",
      "namespace": "DET",
      "signature": "DET.detailDrawColClassBars(mapItem, pixels)",
      "description": "Draws column classification bars on a given detail heat map canvas.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the heat map, containing various properties and methods for drawing and data manipulation."
        },
        {
          "name": "pixels",
          "type": "Uint8ClampedArray",
          "description": "An array representing the pixel data of the canvas where the column classification bars will be drawn."
        }
      ],
      "side_effects": [
        "Modifies the pixel data in the provided 'pixels' array to draw the column classification bars."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "drawColorPlotColClassBar",
      "namespace": "DET",
      "signature": "DET.drawColorPlotColClassBar(mapItem, pixels, pos, rowClassBarWidth, start, length, currentClassBar, classBarValues, colorMap)",
      "description": "The purpose of this function is to draw column color plot class bars on a given detail heat map canvas.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object containing details about the data view, including its width and height."
        },
        {
          "name": "pixels",
          "type": "Uint8Array",
          "description": "A buffer array where the pixel data for the class bar will be written."
        },
        {
          "name": "pos",
          "type": "number",
          "description": "The starting position in the pixel buffer where the class bar will be drawn."
        },
        {
          "name": "rowClassBarWidth",
          "type": "number",
          "description": "The width of the row class bar."
        },
        {
          "name": "start",
          "type": "number",
          "description": "The starting index for the class bar values."
        },
        {
          "name": "length",
          "type": "number",
          "description": "The number of class bar values to process."
        },
        {
          "name": "currentClassBar",
          "type": "object",
          "description": "An object containing details about the current class bar, including its height."
        },
        {
          "name": "classBarValues",
          "type": "array",
          "description": "An array of values representing the class bar data."
        },
        {
          "name": "colorMap",
          "type": "object",
          "description": "An object that provides a method to get the classification color for a given value."
        }
      ],
      "side_effects": [
        "Modifies the 'pixels' buffer by writing the class bar pixel data into it."
      ],
      "returns": {
        "type": "number",
        "description": "The updated position in the pixel buffer after the class bar has been drawn."
      }
    },
    {
      "name": "drawScatterBarPlotColClassBar",
      "namespace": "DET",
      "signature": "DET.drawScatterBarPlotColClassBar(mapItem, pixels, pos, rowClassBarWidth, start, length, currentClassBar, classBarValues, colorMap)",
      "description": "Draws a column bar and scatter plot class bars on a given detail heat map canvas. It aligns the column covariate bar with the heat map and dendrograms, and handles padding to ensure proper alignment.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "Contains data view width and data box width properties for the heat map."
        },
        {
          "name": "pixels",
          "type": "Uint8ClampedArray",
          "description": "Array representing the pixel data for the canvas."
        },
        {
          "name": "pos",
          "type": "number",
          "description": "Current position in the pixel array where drawing starts."
        },
        {
          "name": "rowClassBarWidth",
          "type": "number",
          "description": "Width of the row class bar."
        },
        {
          "name": "start",
          "type": "number",
          "description": "Starting index for class bar values."
        },
        {
          "name": "length",
          "type": "number",
          "description": "Number of class bar values to process."
        },
        {
          "name": "currentClassBar",
          "type": "object",
          "description": "Object representing the current class bar, including its height and method to get scatter plot colors."
        },
        {
          "name": "classBarValues",
          "type": "array",
          "description": "Array of values representing the class bar data."
        },
        {
          "name": "colorMap",
          "type": "object",
          "description": "Object mapping class bar values to colors."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the pixels array to draw the scatter plot and class bars."
      ],
      "error_handling": [
        {
          "errorCode": "Negative padding",
          "description": "Logs an error message if the calculated padding is negative."
        }
      ],
      "returns": {
        "type": "number",
        "description": "The updated position in the pixel array after drawing."
      }
    },
    {
      "name": "detailDrawRowClassBars",
      "namespace": "DET",
      "signature": "DET.detailDrawRowClassBars(mapItem, pixels)",
      "description": "The purpose of this function is to draw row class bars on a given detail heat map canvas.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the map item containing heat map and other related data."
        },
        {
          "name": "pixels",
          "type": "object",
          "description": "An object representing the pixel data for the canvas."
        }
      ],
      "side_effects": [
        "Modifies the pixel data to draw row class bars on the heat map canvas."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "drawColorPlotRowClassBar",
      "namespace": "DET",
      "signature": "DET.drawColorPlotRowClassBar(mapItem, pixels, pos, start, length, currentClassBar, classBarValues, mapWidth, colorMap)",
      "description": "The purpose of this function is to draw color plot class bars on a given detail heat map canvas. It iterates through the specified rows and applies the appropriate color from the color map to the pixels array.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the map item, containing properties such as dataBoxHeight."
        },
        {
          "name": "pixels",
          "type": "Uint8ClampedArray",
          "description": "An array representing the pixel data of the canvas."
        },
        {
          "name": "pos",
          "type": "number",
          "description": "The starting position in the pixels array where the drawing begins."
        },
        {
          "name": "start",
          "type": "number",
          "description": "The starting row index for the class bar drawing."
        },
        {
          "name": "length",
          "type": "number",
          "description": "The number of rows to draw."
        },
        {
          "name": "currentClassBar",
          "type": "object",
          "description": "An object representing the current class bar, containing properties such as height."
        },
        {
          "name": "classBarValues",
          "type": "array",
          "description": "An array of values used to determine the color classification for each row."
        },
        {
          "name": "mapWidth",
          "type": "number",
          "description": "The width of the map in pixels."
        },
        {
          "name": "colorMap",
          "type": "object",
          "description": "An object that provides a method getClassificationColor to get the color for a given classification value."
        }
      ],
      "side_effects": [
        "Modifies the pixels array by setting the RGBA values for the specified rows."
      ],
      "returns": {
        "type": "number",
        "description": "The updated position in the pixels array after drawing the class bars."
      }
    },
    {
      "name": "drawScatterBarPlotRowClassBar",
      "namespace": "DET",
      "signature": "DET.drawScatterBarPlotRowClassBar(mapItem, pixels, pos, start, length, currentClassBar, classBarValues, mapWidth, colorMap)",
      "description": "The purpose of this function is to draw row bar and scatter plot class bars on a given detail heat map canvas.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item containing data and properties for the heat map."
        },
        {
          "name": "pixels",
          "type": "Uint8ClampedArray",
          "description": "The pixel array representing the canvas image data."
        },
        {
          "name": "pos",
          "type": "number",
          "description": "The current position in the pixel array."
        },
        {
          "name": "start",
          "type": "number",
          "description": "The starting index for the class bar values."
        },
        {
          "name": "length",
          "type": "number",
          "description": "The number of class bar values to process."
        },
        {
          "name": "currentClassBar",
          "type": "object",
          "description": "The current class bar object containing properties like height and color information."
        },
        {
          "name": "classBarValues",
          "type": "array",
          "description": "Array of values representing the class bar data."
        },
        {
          "name": "mapWidth",
          "type": "number",
          "description": "The width of the heat map canvas."
        },
        {
          "name": "colorMap",
          "type": "object",
          "description": "The color map used to determine the colors for the scatter plot."
        }
      ],
      "side_effects": [
        "Modifies the pixels array to draw the scatter plot and class bars."
      ],
      "returns": {
        "type": "number",
        "description": "The updated position in the pixel array after drawing."
      }
    },
    {
      "name": "detailResize",
      "namespace": "DET",
      "signature": "DET.detailResize()",
      "description": "This function calls all of the functions necessary to resize all of the open detail panel instances.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls the resizeMapItem function for each item in DVW.detailMaps."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "resizeMapItem",
      "namespace": "None",
      "signature": "resizeMapItem(mapItem)",
      "description": "Resizes and updates the visual elements of a map item, including dendrograms, covariate bars, and labels. This function ensures that all visual components are properly scaled and redrawn.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "The map item object that contains the visual elements to be resized and updated."
        }
      ],
      "side_effects": [
        "Modifies the visual elements of the map item, including dendrograms, covariate bars, and labels."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "calculateCovariateBarScale",
      "namespace": "None",
      "signature": "calculateCovariateBarScale(mapItem, axis)",
      "description": "Calculates and adjusts the scale of covariate bars in a heatmap to ensure they are appropriately sized based on the number of bars and the available space. The function aims to maintain a target font size for the bars and adjusts the scale iteratively until the desired size is achieved or a maximum number of iterations is reached.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the heatmap, containing properties and methods for scaling and rendering covariate bars."
        },
        {
          "name": "axis",
          "type": "string",
          "description": "A string indicating the axis ('row' or 'column') for which the covariate bars are being scaled."
        }
      ],
      "side_effects": [
        "Modifies mapItem.rowClassScale or mapItem.colClassScale based on the axis.",
        "Calls setCanvasDimensions(mapItem) to adjust the canvas dimensions."
      ],
      "returns": {
        "type": "void",
        "description": "Does not return a value."
      }
    },
    {
      "name": "detInitGl",
      "namespace": "DET",
      "signature": "DET.detInitGl(mapItem)",
      "description": "Initializes a WebGL canvas for the presentation of a detail heat map. This function must be called after any context switch and before any GL functions. It ensures that the WebGL context is properly set up for rendering the heat map and covariate bars.",
      "parameters": [
        {
          "name": "mapItem",
          "type": "object",
          "description": "An object representing the map item that contains the canvas and other properties needed for WebGL initialization."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies mapItem by adding a glManager property if it does not exist.",
        "Sets the viewport dimensions and properties of the WebGL context."
      ],
      "error_handling": [],
      "returns": {
        "type": "boolean",
        "description": "Returns true if the WebGL context is ready, otherwise false."
      }
    },
    {
      "name": "initDetailContext",
      "namespace": "None",
      "signature": "initDetailContext(manager, ctx, program)",
      "description": "Initializes the detail context for rendering by clearing the color buffer, setting the clip and texture regions, and retrieving uniform locations for scaling and translation.",
      "parameters": [
        {
          "name": "manager",
          "type": "Object",
          "description": "The manager object responsible for setting clip and texture regions."
        },
        {
          "name": "ctx",
          "type": "WebGLRenderingContext",
          "description": "The WebGL rendering context used for drawing operations."
        },
        {
          "name": "program",
          "type": "WebGLProgram",
          "description": "The WebGL program containing the shaders."
        }
      ],
      "side_effects": [
        "Clears the color buffer.",
        "Sets the clip region and texture region in the manager.",
        "Retrieves and sets uniform locations for scaling and translation in the mapItem object."
      ],
      "returns": {
        "type": "Boolean",
        "description": "Returns true after successfully initializing the detail context."
      }
    },
    {
      "name": "getDetVertexShader",
      "namespace": "None",
      "signature": "getDetVertexShader(theGL)",
      "description": "Creates and compiles a vertex shader using the provided WebGL context.",
      "parameters": [
        {
          "name": "theGL",
          "type": "WebGLRenderingContext",
          "description": "The WebGL context used to create and compile the vertex shader."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Logs shader compilation errors to the console."
      ],
      "error_handling": [
        {
          "errorCode": "COMPILE_STATUS",
          "description": "Logs the shader compilation error to the console if the compilation fails."
        }
      ],
      "returns": {
        "type": "WebGLShader",
        "description": "The compiled vertex shader."
      }
    },
    {
      "name": "getDetFragmentShader",
      "namespace": "None",
      "signature": "getDetFragmentShader(theGL)",
      "description": "This function creates, compiles, and returns a WebGL fragment shader using the provided WebGL context.",
      "parameters": [
        {
          "name": "theGL",
          "type": "WebGLRenderingContext",
          "description": "The WebGL context used to create and compile the fragment shader."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Logs shader compilation errors to the console."
      ],
      "error_handling": [
        {
          "errorCode": "COMPILE_STATUS",
          "description": "If the shader fails to compile, an error message is logged to the console."
        }
      ],
      "returns": {
        "type": "WebGLShader",
        "description": "The compiled WebGL fragment shader."
      }
    }
  ]
}