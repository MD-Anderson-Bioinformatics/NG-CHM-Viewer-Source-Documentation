{
  "filename": "UserHelpManager.js",
  "namespace": "NgChm.UHM",
  "description": [
    "This module handles the processing for user help popup windows for the detail canvas and the detail canvas buttons. It includes functions for displaying messages, handling tooltips, and managing various UI elements related to user help."
  ],
  "declares_functions_in": [
    "UHM"
  ],
  "interacts_with": [
    "NgChm.UTIL"
  ],
  "classes": [],
  "member_variables": [
    {
      "name": "UHM.myNonce",
      "description": "Shared secret for vetting message sender"
    },
    {
      "name": "UHM.postID",
      "description": "Unique ID to be returned with data point messages"
    },
    {
      "name": "UHM.postMapDetails",
      "description": "Flag indicating whether to post map details to an enclosing document"
    },
    {
      "name": "UHM.postMapToWhom",
      "description": "Identity of the window to post map details to"
    }
  ],
  "global_variables": [
    {
      "name": "popupTimeoutId",
      "description": "Timeout for displaying a pending popup window"
    },
    {
      "name": "popupTimeoutElement",
      "description": "Element for which a popup window is being displayed"
    }
  ],
  "exports": [
    "UHM.addBlankRow",
    "UHM.cancelOperation",
    "UHM.closeMenu",
    "UHM.closeNewMessageBox",
    "UHM.createCloseX",
    "UHM.displayMessageBox",
    "UHM.displayNewMessageBox",
    "UHM.displayStartupWarnings",
    "UHM.formatBlankRow",
    "UHM.formatMapDetails",
    "UHM.getDivElement",
    "UHM.getElemPosition",
    "UHM.getMessageTextBox",
    "UHM.getNewMessageTextBox",
    "UHM.hamburgerLinkMissing",
    "UHM.hlp",
    "UHM.hlpC",
    "UHM.initMessageBox",
    "UHM.invalidFileFormat",
    "UHM.isProgressBarVisible",
    "UHM.linkoutError",
    "UHM.mapLoadError",
    "UHM.mapNotFound",
    "UHM.messageBoxCancel",
    "UHM.messageBoxIsVisible",
    "UHM.newMessageBox",
    "UHM.noWebGlContext",
    "UHM.processMessage",
    "UHM.setMessageBoxButton",
    "UHM.setMessageBoxHeader",
    "UHM.setMessageBoxText",
    "UHM.setNewMessageBoxButton",
    "UHM.setNewMessageBoxHeader",
    "UHM.setTableRow",
    "UHM.setTableRowX",
    "UHM.systemMessage",
    "addMsgBoxButton",
    "click",
    "findMajorNode",
    "hideMsgBoxProgressBar",
    "mouseout",
    "mouseover",
    "msgBoxProgressMeter",
    "pasteHelpContents",
    "showMsgBoxProgressBar",
    "uiElement.onclick"
  ],
  "functions": [
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "uiElement.onclick()",
      "description": "This function sets an onclick event handler for the uiElement that triggers the display of startup warnings using the UHM.displayStartupWarnings method.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Triggers the display of startup warnings."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "click",
      "namespace": "None",
      "signature": "click(ev)",
      "description": "Handles click events by clearing any pending tooltips, closing menus, and removing elements with the 'remove-on-click' class.",
      "parameters": [
        {
          "name": "ev",
          "type": "Event",
          "description": "The event object representing the click event."
        }
      ],
      "side_effects": [
        "Clears any pending tooltips.",
        "Closes any open menus.",
        "Removes elements with the 'remove-on-click' class from the DOM."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "mouseout",
      "namespace": "None",
      "signature": "mouseout(ev)",
      "description": "Handles the mouseout event by finding the major node of the event target and removing the 'hovering' dataset attribute from it.",
      "parameters": [
        {
          "name": "ev",
          "type": "Event",
          "description": "The mouseout event object."
        }
      ],
      "side_effects": [
        "Removes the 'hovering' dataset attribute from the major node of the event target."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "mouseover",
      "namespace": "None",
      "signature": "mouseover(ev)",
      "description": "Handles the mouseover event by finding the major node of the event target, setting a hovering dataset attribute, and displaying a tooltip if available.",
      "parameters": [
        {
          "name": "ev",
          "type": "Event",
          "description": "The mouseover event object."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Sets the 'hovering' dataset attribute on the major node of the event target.",
        "Displays a tooltip using the UHM.hlp function if the 'tooltip' dataset attribute is present."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "findMajorNode",
      "namespace": "None",
      "signature": "findMajorNode(el)",
      "description": "This function traverses up the DOM tree starting from the given element and returns the first ancestor element that is either a button or has a 'tooltip' or 'title' data attribute. If no such element is found, it returns the original element.",
      "parameters": [
        {
          "name": "el",
          "type": "HTMLElement",
          "description": "The starting element from which the DOM traversal begins."
        }
      ],
      "returns": {
        "type": "HTMLElement",
        "description": "The first ancestor element that is either a button or has a 'tooltip' or 'title' data attribute, or the original element if no such ancestor is found."
      }
    },
    {
      "name": "processMessage",
      "namespace": "UHM",
      "signature": "UHM.processMessage(e)",
      "description": "This function processes messages received by the NgChm. It customizes behavior when the NgChm is included in an iFrame. If the message includes 'override: ShowMapDetail', it will post map details to the enclosing window instead of displaying them within the NGCHM.",
      "parameters": [
        {
          "name": "e",
          "type": "object",
          "description": "The event object containing the message data."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Sets UHM.myNonce if it is empty.",
        "Sets UHM.postMapDetails to true if the message includes 'override: ShowMapDetail'.",
        "Sets UHM.postMapToWhom to the origin of the message if the message includes 'override: ShowMapDetail'.",
        "Sets UHM.postID to the provided unique ID if present in the message."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "formatMapDetails",
      "namespace": "UHM",
      "signature": "UHM.formatMapDetails(helpContents, pixelInfo)",
      "description": "Formats the pixel information for display in the helpContents table. It adds rows to the table with details about the pixel value, row, column, and any associated covariates.",
      "parameters": [
        {
          "name": "helpContents",
          "type": "HTMLTableElement",
          "description": "The table element where the pixel information will be displayed."
        },
        {
          "name": "pixelInfo",
          "type": "PixelInfo",
          "description": "An object containing details about the pixel, including value, row label, column label, and any row or column covariates."
        }
      ],
      "side_effects": [
        "Modifies the helpContents table by adding rows with pixel information."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "pasteHelpContents",
      "namespace": "None",
      "signature": "pasteHelpContents()",
      "description": "This function opens a new browser window and pastes the contents of the user help panel into the window, converting line breaks to HTML <br> tags.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Opens a new browser window.",
        "Reads the inner text of the element with ID 'helpTable'."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "hlp",
      "namespace": "UHM",
      "signature": "UHM.hlp(element, text, width, reverse, delay = 500)",
      "description": "Generates a pop-up help panel (tooltip) for the specified user interface element. The tooltip displays a title and text, and can be positioned either below the element or to the left if reverse is specified.",
      "parameters": [
        {
          "name": "element",
          "type": "HTMLElement",
          "description": "The DOM element for which the tooltip is generated."
        },
        {
          "name": "text",
          "type": "string",
          "description": "The text to display in the tooltip if the element's intro dataset property is not available."
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width in pixels to position the tooltip to the left if reverse is specified."
        },
        {
          "name": "reverse",
          "type": "boolean",
          "description": "If true, positions the tooltip to the left of the element by the specified width."
        },
        {
          "name": "delay",
          "type": "number",
          "description": "The delay in milliseconds before the tooltip appears. Defaults to 500ms."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Sets a timeout to display the tooltip after the specified delay.",
        "Appends the tooltip element to the body of the document.",
        "Clears any existing tooltip before displaying a new one."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getElemPosition",
      "namespace": "UHM",
      "signature": "UHM.getElemPosition(el)",
      "description": "This function calculates the position of a given HTML element on the entire screen, not just within its parent container. It returns the coordinates which can be used to position elements like help text bubbles on the document body.",
      "parameters": [
        {
          "name": "el",
          "type": "HTMLElement",
          "description": "The HTML element whose position is to be calculated."
        }
      ],
      "returns": {
        "type": "object",
        "description": "An object containing the top and left coordinates of the element on the screen."
      }
    },
    {
      "name": "hlpC",
      "namespace": "UHM",
      "signature": "UHM.hlpC()",
      "description": "This function clears any bubble help box displayed on the screen.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Clears the popupTimeoutId timeout if it is set.",
        "Sets popupTimeoutId and popupTimeoutElement to null.",
        "Removes the HTML element with id 'bubbleHelp' or 'helptext' from the document if it exists."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getDivElement",
      "namespace": "UHM",
      "signature": "UHM.getDivElement(elemName)",
      "description": "Creates and returns a DIV HTML element configured for a help pop-up panel. The DIV element is assigned a specific background color and initially hidden.",
      "parameters": [
        {
          "name": "elemName",
          "type": "string",
          "description": "The ID to be assigned to the created DIV element."
        }
      ],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "HTMLDivElement",
        "description": "The created DIV element with the specified ID, background color, and display style."
      }
    },
    {
      "name": "setTableRow",
      "namespace": "UHM",
      "signature": "UHM.setTableRow(tableObj, tdArray, colSpan, align)",
      "description": "The purpose of this function is to set a row into a help or configuration HTML TABLE item for a given help pop-up panel. It receives text for the header column, detail column, and the number of columns to span as inputs.",
      "parameters": [
        {
          "name": "tableObj",
          "type": "HTMLTableElement",
          "description": "The HTML table element where the row will be inserted."
        },
        {
          "name": "tdArray",
          "type": "Array",
          "description": "An array containing the content for each cell in the row. The content can be a string, number, or an HTML element."
        },
        {
          "name": "colSpan",
          "type": "number",
          "description": "The number of columns the cell should span. This parameter is optional."
        },
        {
          "name": "align",
          "type": "string",
          "description": "The alignment of the cell content. This parameter is optional."
        }
      ],
      "side_effects": [
        "Inserts a new row into the provided HTML table element.",
        "Modifies the class name of the inserted row.",
        "Sets the colSpan and alignment of the cells if provided.",
        "Sets the font weight of the first cell to bold."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setTableRowX",
      "namespace": "UHM",
      "signature": "UHM.setTableRowX(tableObj, tdArray, rowClasses, tdProps)",
      "description": "eXperimental/eXtended version of setTableRow. Configures an HTML table row for a given help pop-up panel. It receives text for the header column, detail column, and the number of columns to span as inputs.",
      "parameters": [
        {
          "name": "tableObj",
          "type": "HTMLTableElement",
          "description": "The table element to which the row will be added."
        },
        {
          "name": "tdArray",
          "type": "Array",
          "description": "Array containing the content for each cell in the row."
        },
        {
          "name": "rowClasses",
          "type": "Array",
          "description": "Array of class names to be added to the row."
        },
        {
          "name": "tdProps",
          "type": "Array",
          "description": "Array of objects containing properties to be applied to each cell."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the DOM by adding a new row to the specified table.",
        "Adds classes and properties to the newly created row and its cells."
      ],
      "error_handling": [
        {
          "errorCode": "Unknown object in tdProps",
          "description": "Logs an error message to the console if an unknown property is found in tdProps."
        }
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "formatBlankRow",
      "namespace": "UHM",
      "signature": "UHM.formatBlankRow()",
      "description": "The purpose of this function is to return the HTML text for a blank row.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "string",
        "description": "HTML string representing a blank table row with a colspan of 2 and a line-height of 4px."
      }
    },
    {
      "name": "addBlankRow",
      "namespace": "UHM",
      "signature": "UHM.addBlankRow(addDiv, rowCnt)",
      "description": "The purpose of this function is to add one or more blank rows to a given table element. It uses the UHM.formatBlankRow() function to generate the HTML for each blank row.",
      "parameters": [
        {
          "name": "addDiv",
          "type": "HTMLTableElement",
          "description": "The table element to which the blank rows will be added."
        },
        {
          "name": "rowCnt",
          "type": "number",
          "description": "The number of blank rows to add. If undefined, only one blank row will be added."
        }
      ],
      "side_effects": [
        "Modifies the innerHTML of the rows added to the table element."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "hamburgerLinkMissing",
      "namespace": "UHM",
      "signature": "UHM.hamburgerLinkMissing()",
      "description": "This function handles all of the tasks necessary to display a modal window whenever a user clicks on a hamburger menu link that has not had its callback destination defined.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Initializes and displays a message box with a specific error message and a cancel button."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "systemMessage",
      "namespace": "UHM",
      "signature": "UHM.systemMessage(header, message)",
      "description": "This function handles all of the tasks necessary to display a modal window whenever a given notification condition occurs.",
      "parameters": [
        {
          "name": "header",
          "type": "String",
          "description": "The header text to be displayed in the modal window."
        },
        {
          "name": "message",
          "type": "String",
          "description": "The message text to be displayed in the modal window."
        }
      ],
      "side_effects": [
        "Initializes the message box.",
        "Sets the header and message text of the message box.",
        "Configures the cancel button for the message box.",
        "Displays the message box."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "noWebGlContext",
      "namespace": "UHM",
      "signature": "UHM.noWebGlContext(isDisabled)",
      "description": "This function displays an error message when no WebGL context is available or enabled on the user's machine. It initializes a message box, sets the appropriate error message based on whether WebGL is disabled or not available, and displays the message box with a cancel button.",
      "parameters": [
        {
          "name": "isDisabled",
          "type": "boolean",
          "description": "Indicates whether WebGL is available but disabled (true) or not available (false)."
        }
      ],
      "side_effects": [
        "Initializes and displays a message box with an error message and a cancel button."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "mapNotFound",
      "namespace": "UHM",
      "signature": "UHM.mapNotFound(heatMapName)",
      "description": "This function displays an error message when a requested Heat Map cannot be found or if connectivity to the Heat Map repository has been interrupted.",
      "parameters": [
        {
          "name": "heatMapName",
          "type": "String",
          "description": "The name of the Heat Map that could not be found."
        }
      ],
      "side_effects": [
        "Hides the loader.",
        "Initializes the message box.",
        "Sets the message box header to 'Requested Heat Map Not Found'.",
        "Sets the message box text to inform the user that the Heat Map cannot be found or connectivity is interrupted.",
        "Sets the message box button to 'Cancel' with a cancel action.",
        "Displays the message box."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "mapLoadError",
      "namespace": "UHM",
      "signature": "UHM.mapLoadError(heatMapName, details)",
      "description": "This function displays an error message when a heat map file cannot be loaded. It hides the loader, initializes the message box, sets the message box header and text, configures the cancel button, and displays the message box.",
      "parameters": [
        {
          "name": "heatMapName",
          "type": "String",
          "description": "The name of the heat map that failed to load."
        },
        {
          "name": "details",
          "type": "String",
          "description": "Details about why the heat map could not be loaded."
        }
      ],
      "side_effects": [
        "Hides the loader.",
        "Initializes and displays a message box with error details."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "linkoutError",
      "namespace": "UHM",
      "signature": "UHM.linkoutError(msgText)",
      "description": "This function displays a linkout error message in a message box with a cancel button.",
      "parameters": [
        {
          "name": "msgText",
          "type": "String",
          "description": "The error message text to be displayed in the message box."
        }
      ],
      "side_effects": [
        "Initializes and displays a message box with the provided error message and a cancel button."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "invalidFileFormat",
      "namespace": "UHM",
      "signature": "UHM.invalidFileFormat()",
      "description": "This function displays an error message when the user selects a file that is not an NG-CHM file. It initializes a message box, sets the header and text for the error message, configures a cancel button, and then displays the message box.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Initializes and displays a message box with an error message.",
        "Sets the header and text of the message box.",
        "Configures a cancel button for the message box."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "initMessageBox",
      "namespace": "UHM",
      "signature": "UHM.initMessageBox()",
      "defined_section": "FUNCTIONS - MESSAGE BOX FUNCTIONS",
      "description": "Initializes and hides the message box panel. This function resets the message box by removing all classes, hiding it, and clearing any buttons present.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Hides the message box by setting its display style to 'none'.",
        "Removes all classes from the message box.",
        "Clears all buttons from the message box.",
        "Hides the 'messageOpen_btn' button."
      ],
      "error_handling": [],
      "returns": {
        "type": "HTMLElement",
        "description": "The message box element after initialization."
      }
    },
    {
      "name": "messageBoxIsVisible",
      "namespace": "UHM",
      "signature": "UHM.messageBoxIsVisible()",
      "description": "Checks if the message box with the ID 'msgBox' is currently visible on the webpage.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "boolean",
        "description": "Returns true if the message box is visible, otherwise returns false."
      }
    },
    {
      "name": "setMessageBoxHeader",
      "namespace": "UHM",
      "signature": "UHM.setMessageBoxHeader(headerText)",
      "description": "Sets the header text of the message box and adds a close button.",
      "parameters": [
        {
          "name": "headerText",
          "type": "String",
          "description": "The text to be displayed in the message box header."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the innerHTML of the element with id 'msgBoxHdr'.",
        "Removes any existing close button with class 'closeX' from the message box header.",
        "Appends a new close button to the message box header."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getMessageTextBox",
      "namespace": "UHM",
      "signature": "UHM.getMessageTextBox()",
      "description": "Retrieves the HTML element with the ID 'msgBoxTxt' from the document.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "HTMLElement",
        "description": "The HTML element with the ID 'msgBoxTxt'."
      }
    },
    {
      "name": "setMessageBoxText",
      "namespace": "UHM",
      "signature": "UHM.setMessageBoxText(text)",
      "description": "Sets the inner HTML of the element with the ID 'msgBoxTxt' to the provided text.",
      "parameters": [
        {
          "name": "text",
          "type": "String",
          "description": "The text to be set as the inner HTML of the message box element."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the inner HTML of the element with ID 'msgBoxTxt'."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "displayMessageBox",
      "namespace": "UHM",
      "signature": "UHM.displayMessageBox()",
      "description": "Displays a message box by setting its display style to visible and positioning it at the center of the window horizontally and below a header panel vertically.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the display style of the element with id 'msgBox'.",
        "Positions the 'msgBox' element horizontally centered and vertically below the 'mdaServiceHeader' element."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setMessageBoxButton",
      "namespace": "UHM",
      "signature": "UHM.setMessageBoxButton(buttonId, buttonSpec, altText, onClick)",
      "description": "Adds a button to the message box with specified properties and behavior.",
      "parameters": [
        {
          "name": "buttonId",
          "type": "String",
          "description": "An ID specific to this button within the message box."
        },
        {
          "name": "buttonSpec",
          "type": "Object",
          "description": "Describes the button to insert. Deprecated usage: a string that identifies the image source of the button. New usage: an object with fields: type, src, alt, text, tooltip, disableOnClick, disabled, disabledReason, default."
        },
        {
          "name": "altText",
          "type": "String",
          "description": "Deprecated: Added to 'alt' attribute of img buttons. Superseded by alt field in buttonSpec."
        },
        {
          "name": "onClick",
          "type": "Function",
          "description": "Function called when the user clicks on the button. Defaults to UHM.messageBoxCancel."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the DOM by adding a button to the message box."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "No return value."
      }
    },
    {
      "name": "addMsgBoxButton",
      "namespace": "None",
      "signature": "addMsgBoxButton(msgBox, buttonId, buttonSpec, altText, onClick)",
      "description": "Adds a button to a message box with specified properties and behavior.",
      "parameters": [
        {
          "name": "msgBox",
          "type": "HTMLElement",
          "description": "The message box element to which the button will be added."
        },
        {
          "name": "buttonId",
          "type": "String",
          "description": "The unique identifier for the button."
        },
        {
          "name": "buttonSpec",
          "type": "Object",
          "description": "Specifications for the button, including type, source, text, default state, disabled state, and tooltip."
        },
        {
          "name": "altText",
          "type": "String",
          "description": "Alternative text for the button image. If a function is passed, it will be used as the onClick handler."
        },
        {
          "name": "onClick",
          "type": "Function",
          "description": "The function to be executed when the button is clicked."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the msgBox element by adding a new button.",
        "If the button is clicked and disableOnClick is true, the button will be disabled.",
        "If no onClick handler is provided, the default behavior will close or remove the message box."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "newButton.onclick()",
      "description": "Handles the click event for the newButton element. Depending on the condition, it either closes the original message box or removes a new message box from the document body.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Calls UHM.messageBoxCancel() to close the original message box.",
        "Removes the msgBox element from the document body."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onclick",
      "namespace": "None",
      "signature": "newButton.onclick(ev)",
      "description": "Handles the click event for the newButton element. Disables the button if specified and triggers the onClick function.",
      "parameters": [
        {
          "name": "ev",
          "type": "Event",
          "description": "The event object associated with the click event."
        }
      ],
      "side_effects": [
        "Disables the newButton element if buttonSpec.disableOnClick is true."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "showMsgBoxProgressBar",
      "namespace": "None",
      "signature": "showMsgBoxProgressBar()",
      "description": "Displays the progress bar in the message box and initializes its value to 0. Typically called by a long-running button event handler.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the display style of the HTML element with id 'msgBoxProgressDiv'.",
        "Sets the value of the HTML element with id 'msgBoxProgressBar' to 0."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "hideMsgBoxProgressBar",
      "namespace": "None",
      "signature": "hideMsgBoxProgressBar()",
      "description": "Hides the message box progress bar by setting the display style of the 'msgBoxProgressDiv' element to 'none'. Normally, this function does not need to be called explicitly as it will be called automatically when the message box is cancelled.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the display style of the 'msgBoxProgressDiv' element."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "isProgressBarVisible",
      "namespace": "UHM",
      "signature": "UHM.isProgressBarVisible()",
      "description": "Checks if the progress bar is currently visible on the webpage.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "boolean",
        "description": "Returns true if the progress bar is visible, otherwise false."
      }
    },
    {
      "name": "msgBoxProgressMeter",
      "namespace": "None",
      "signature": "msgBoxProgressMeter(value)",
      "description": "Updates the value of a message box progress bar and checks if the progress has been cancelled.",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "A number between 0 (not started) and 1 (finished) representing the progress."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Updates the value of the progress bar element with id 'msgBoxProgressBar'."
      ],
      "error_handling": [],
      "returns": {
        "type": "boolean",
        "description": "Returns true if the progress has not been cancelled, otherwise false."
      }
    },
    {
      "name": "cancelOperation",
      "namespace": "UHM",
      "signature": "UHM.cancelOperation()",
      "description": "Cancels an ongoing operation by setting a 'cancelled' flag and reducing the opacity of the progress bar.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Sets the 'cancelled' data attribute of the element with ID 'msgBoxProgressBar' to 'true'.",
        "Changes the opacity of the element with ID 'msgBoxProgressDiv' to 0.5."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "messageBoxCancel",
      "namespace": "UHM",
      "signature": "UHM.messageBoxCancel()",
      "description": "This function initializes the message box by calling the initMessageBox method.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return any value."
      }
    },
    {
      "name": "newMessageBox",
      "namespace": "UHM",
      "signature": "UHM.newMessageBox(name)",
      "description": "Creates a new message box dynamically. If a message box with the specified name already exists, it returns the existing one. Otherwise, it creates a new message box using a template, assigns it a unique ID, and makes it draggable.",
      "parameters": [
        {
          "name": "name",
          "type": "str",
          "description": "The name used to uniquely identify the message box."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Appends a new message box element to the document body.",
        "Makes the new message box draggable using the UTIL.dragElement function."
      ],
      "error_handling": [],
      "returns": {
        "type": "HTMLElement",
        "description": "The newly created or existing message box element."
      }
    },
    {
      "name": "setNewMessageBoxHeader",
      "namespace": "UHM",
      "signature": "UHM.setNewMessageBoxHeader(msgBox, headerText)",
      "description": "Sets the header text of a new message box and adds a close button to it.",
      "parameters": [
        {
          "name": "msgBox",
          "type": "HTMLElement",
          "description": "The message box element whose header is to be set."
        },
        {
          "name": "headerText",
          "type": "String",
          "description": "The text to be set as the header of the message box."
        }
      ],
      "side_effects": [
        "Modifies the innerHTML of the msgBox header.",
        "Removes any existing close button in the msgBox header.",
        "Appends a new close button to the msgBox header."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getNewMessageTextBox",
      "namespace": "UHM",
      "signature": "UHM.getNewMessageTextBox(msgBox)",
      "description": "Retrieves the text box element from a given message box element.",
      "parameters": [
        {
          "name": "msgBox",
          "type": "HTMLElement",
          "description": "The message box element from which to retrieve the text box."
        }
      ],
      "returns": {
        "type": "HTMLElement",
        "description": "The text box element within the provided message box."
      }
    },
    {
      "name": "setNewMessageBoxButton",
      "namespace": "UHM",
      "signature": "UHM.setNewMessageBoxButton(msgBox, buttonId, buttonSpec, onClick)",
      "description": "Adds a button to a new message box. If no onClick handler is provided, it defaults to closing the message box.",
      "parameters": [
        {
          "name": "msgBox",
          "type": "object",
          "description": "The message box to which the button will be added."
        },
        {
          "name": "buttonId",
          "type": "string",
          "description": "The identifier for the new button."
        },
        {
          "name": "buttonSpec",
          "type": "object",
          "description": "Specifications for the new button, such as label and style."
        },
        {
          "name": "onClick",
          "type": "function",
          "description": "The function to be executed when the button is clicked. Defaults to closing the message box if not provided."
        }
      ],
      "side_effects": [
        "If onClick is not provided, it defaults to a function that closes the message box.",
        "Modifies the msgBox object by adding a new button."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "displayNewMessageBox",
      "namespace": "UHM",
      "signature": "UHM.displayNewMessageBox(msgBox)",
      "description": "Displays a new message box by removing the 'hide' class from the provided message box element.",
      "parameters": [
        {
          "name": "msgBox",
          "type": "HTMLElement",
          "description": "The message box element to be displayed."
        }
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "closeNewMessageBox",
      "namespace": "UHM",
      "signature": "UHM.closeNewMessageBox(msgBox)",
      "description": "Closes and removes a new message box element from the document body.",
      "parameters": [
        {
          "name": "msgBox",
          "type": "HTMLElement",
          "description": "The message box element to be removed from the document body."
        }
      ],
      "side_effects": [
        "Removes the specified message box element from the document body."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "closeMenu",
      "namespace": "UHM",
      "signature": "UHM.closeMenu()",
      "description": "Closes the burger menu panel if the bar menu button is not being hovered over.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the display style of the element with id 'burgerMenuPanel'."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "displayStartupWarnings",
      "namespace": "UHM",
      "signature": "UHM.displayStartupWarnings()",
      "description": "Displays startup warnings in a popup box when the user opens a heat map. Multiple possible warnings may be displayed, including unsupported browser warnings and minimum font size warnings.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Displays a message box with warnings.",
        "Modifies the message box header and text.",
        "Sets a cancel button in the message box."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "createCloseX",
      "namespace": "UHM",
      "signature": "UHM.createCloseX(closeFunction)",
      "description": "Creates a span element containing an 'X' button that can be used to close a dialog. The button's click event is tied to the provided closeFunction.",
      "parameters": [
        {
          "name": "closeFunction",
          "type": "function",
          "description": "The function to be executed when the 'X' button is clicked."
        }
      ],
      "returns": {
        "type": "HTMLElement",
        "description": "A span element containing the 'X' button."
      }
    }
  ]
}