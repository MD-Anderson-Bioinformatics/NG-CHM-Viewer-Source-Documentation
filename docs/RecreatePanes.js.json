{
  "filename": "RecreatePanes.js",
  "namespace": "NgChm.RecPanes",
  "description": [
    "This module is responsible for reconstructing a saved pane layout in the NGCHM application. It handles the creation and configuration of pane and container elements based on a saved state, including setting up event handlers and restoring pane content."
  ],
  "declares_functions_in": [
    "NgChm.RecPanes"
  ],
  "interacts_with": [
    "NgChm.UTIL",
    "NgChm.LNK",
    "NgChm.SRCHSTATE",
    "NgChm.SRCH",
    "NgChm.Pane",
    "NgChm.MMGR",
    "NgChm.SMM",
    "NgChm.SUM",
    "NgChm.DVW",
    "NgChm.DET",
    "NgChm.DEV",
    "NgChm.DMM",
    "NgChm.CUST"
  ],
  "classes": [],
  "member_variables": [
    {
      "name": "RECPANES.mapConfigPanelConfiguration",
      "description": "Stores the configuration of the panel layout from the mapConfig.json file."
    }
  ],
  "global_variables": [
    {
      "name": "usedVersionNumbers",
      "description": "Tracks the version numbers used by the saved panel configuration."
    }
  ],
  "exports": [
    "reconstructPanelsFromMapConfig"
  ],
  "functions": [
    {
      "name": "reconstructPanelsFromMapConfig",
      "namespace": "None",
      "signature": "reconstructPanelsFromMapConfig(initialLoc, savedState)",
      "description": "Reconstructs the panels from data in the mapConfig.json file. This function waits for plugins to load before attempting to reconstruct the panel layout.",
      "parameters": [
        {
          "name": "initialLoc",
          "type": "object",
          "description": "Initial location configuration for the panels."
        },
        {
          "name": "savedState",
          "type": "object",
          "description": "Saved state containing the panel layout configuration."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies RECPANES.mapConfigPanelConfiguration with the saved state.",
        "Replaces children of UTIL.containerElement with the reconstructed panel layout.",
        "Adds divider controls and resize handlers to containers.",
        "Waits for plugins to load and then populates plugin panels.",
        "Sets initial pane content and selections.",
        "Performs an initial search which may override saved results.",
        "Resizes NGCHM pane and updates heat map state.",
        "Updates selections and toggles screen mode for expanded panels.",
        "Hides the loader screen and displays NG-CHM."
      ],
      "error_handling": [
        {
          "errorCode": "Error",
          "description": "Logs an error message and throws an error if panel layout reconstruction fails."
        }
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "populatePluginPanels",
      "namespace": "None",
      "signature": "populatePluginPanels()",
      "description": "Initializes and populates the plugin panels with content, sets selections, performs an initial search, resizes the heatmap, and updates the UI accordingly.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Sets initial pane content",
        "Sets saved selections",
        "Performs an initial search",
        "Resizes the heatmap",
        "Updates selections",
        "Toggles screen mode for expanded panels",
        "Resizes all panes",
        "Hides the loader screen and displays the NG-CHM"
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "createLayout",
      "namespace": "None",
      "signature": "createLayout(saveSpec, parent)",
      "description": "Create an NgChm container/pane layout according to the given save state specification. Users should pass the saveSpec for the top level ngChmContainer and leave parent undefined. The function calls itself recursively. Panes in the generated layout are empty and need their content set. The pane/container sizes are set to those in the specification and have to be adjusted for the current window size.",
      "parameters": [
        {
          "name": "saveSpec",
          "type": "object",
          "description": "The save state specification object that defines the layout structure, including type, dimensions, and children."
        },
        {
          "name": "parent",
          "type": "HTMLElement",
          "description": "The parent HTML element to which the created layout will be appended. This is undefined for the top-level container."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the DOM by creating and appending new elements based on the saveSpec.",
        "Adds event listeners to the created elements.",
        "May modify the 'expandedPanel' dataset attribute of elements."
      ],
      "error_handling": [
        {
          "errorCode": "UnknownSaveSpecType",
          "description": "Logs an error message to the console if the saveSpec type is unknown."
        }
      ],
      "returns": {
        "type": "HTMLElement",
        "description": "The created HTML element representing the pane or container layout."
      }
    },
    {
      "name": "addDividerControlsToResizeHelpers",
      "namespace": "None",
      "signature": "addDividerControlsToResizeHelpers()",
      "description": "Adds DividerControl methods to elements with the class 'resizerHelper'. This function iterates through all elements with the class 'resizerHelper' and assigns a new instance of PANE.DividerControl to each element's 'dividerController' property.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the 'dividerController' property of elements with the class 'resizerHelper'."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "addResizeHandlersToContainers",
      "namespace": "None",
      "signature": "addResizeHandlersToContainers()",
      "description": "Adds 'paneresize' event handlers to all elements with the class 'ngChmContainer'. This allows these elements to respond to resize events by invoking the PANE.resizeHandler function.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Adds 'paneresize' event listeners to elements with the class 'ngChmContainer'."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setPanesContent",
      "namespace": "None",
      "signature": "setPanesContent()",
      "description": "Iterates over elements with the class 'pane', sorts them based on specific criteria, and sets their content. The sorting ensures that the 'nextMapNumber' (the number suffix to id = 'detail_chm*') is in a smooth sequence.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the content of elements with the class 'pane'.",
        "Calls setUsedVersionNumbers() which may have its own side effects.",
        "Calls setPaneContent(pane.id) for each pane, which modifies the pane's content.",
        "Calls PANE.resetPaneCounter(getHighestPaneId() + 1) which resets the pane counter."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getHighestPaneId",
      "namespace": "None",
      "signature": "function getHighestPaneId()",
      "description": "Returns the highest pane ID for panes currently in the DOM.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Logs an error message to the console if an error occurs."
      ],
      "error_handling": [
        {
          "errorCode": "Error",
          "description": "Logs an error message to the console and rethrows the error."
        }
      ],
      "returns": {
        "type": "number",
        "description": "The highest pane ID found among the elements with the class 'pane'."
      }
    },
    {
      "name": "setSelections",
      "namespace": "None",
      "signature": "function setSelections()",
      "description": "This function sets the selections for rows, columns, and dendrogram bars based on the configuration stored in the RECPANES.mapConfigPanelConfiguration object. It updates the search results vectors for rows and columns and restores the selected dendrogram bars if they exist.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Updates the search results vectors for rows and columns using SRCH.setAxisSearchResultsVec.",
        "Restores selected dendrogram bars using SUM.rowDendro.restoreSelectedBars and SUM.colDendro.restoreSelectedBars."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setPaneContent",
      "namespace": "None",
      "signature": "setPaneContent(paneid)",
      "description": "Set a pane's content based on the 'config.type' attribute. This function updates the content of a specified pane by its ID, based on its configuration type, which can be 'summaryMap', 'detailMap', 'plugin', or 'linkout'.",
      "parameters": [
        {
          "name": "paneid",
          "type": "String",
          "description": "The ID of the pane to be updated."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies the content of the specified pane based on its configuration.",
        "Deletes the pane's configuration from RECPANES.mapConfigPanelConfiguration.",
        "Resizes the pane if it is a detail map.",
        "Handles plugin loading errors and displays messages for missing plugins.",
        "Collapses the pane if it is in a collapsed state."
      ],
      "error_handling": [
        {
          "errorCode": "Error loading plugin",
          "description": "Logs the error and the specified plugin name to the console, then throws an error."
        }
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "setUsedVersionNumbers",
      "namespace": "None",
      "signature": "function setUsedVersionNumbers()",
      "description": "Tracks and saves the version numbers used in the saved panel configuration. This function must be called before panels are restored, as restoring a panel removes its information from the saved panel configuration.",
      "parameters": [],
      "side_effects": [
        "Updates the global variable 'usedVersionNumbers' with an array of version numbers from the saved panel configuration."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "getUnusedVersionNumber",
      "namespace": "None",
      "signature": "getUnusedVersionNumber()",
      "description": "Get the first unused version number and note that it is now used.",
      "parameters": [],
      "side_effects": [
        "Modifies the global array 'usedVersionNumbers' by adding the newly found unused version number."
      ],
      "returns": {
        "type": "number",
        "description": "The first unused version number."
      }
    },
    {
      "name": "getPaneInfoFromMapConfig",
      "namespace": "None",
      "signature": "getPaneInfoFromMapConfig(paneId)",
      "description": "Retrieves the configuration information for a specific pane from the global RECPANES.mapConfigPanelConfiguration object. If the pane configuration is not found, it returns an empty object and logs a warning. Handles TypeError exceptions by returning false.",
      "parameters": [
        {
          "name": "paneId",
          "type": "String",
          "description": "The identifier of the pane whose configuration information is to be retrieved."
        }
      ],
      "side_effects": [
        "Logs a warning if the pane configuration is not found."
      ],
      "error_handling": [
        {
          "errorCode": "TypeError",
          "description": "Returns false if a TypeError occurs during the retrieval process."
        }
      ],
      "returns": {
        "type": "Object",
        "description": "The configuration information for the specified pane. Returns an empty object if the pane configuration is not found, or false if a TypeError occurs."
      }
    }
  ]
}