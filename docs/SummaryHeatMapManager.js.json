{
  "filename": "SummaryHeatMapManager.js",
  "namespace": "NgChm.SMM",
  "description": [
    "This module manages the summary heat map functionality within the NgChm application. It handles user interactions such as mouse and touch events on the summary heat map, updates the selection, and manages the display and resizing of the summary panel."
  ],
  "declares_functions_in": [
    "SMM"
  ],
  "interacts_with": [
    "NgChm.MAPREP",
    "NgChm.MMGR",
    "NgChm.SUM",
    "NgChm.DVW",
    "NgChm.DMM",
    "NgChm.Pane",
    "NgChm.SRCH"
  ],
  "classes": [],
  "member_variables": [
    {
      "name": "SUM.chmElement",
      "description": "The DOM element representing the summary heat map."
    }
  ],
  "global_variables": [],
  "exports": [
    "SMM.onMouseUpSelRowCanvas",
    "SMM.onMouseUpSelColCanvas",
    "SMM.getTouchEventOffset",
    "SMM.onMouseDownCanvas",
    "SMM.onMouseOut",
    "SMM.onMouseMoveCanvas",
    "SMM.onMouseUpCanvas",
    "SMM.clickSelection",
    "SMM.dragMove",
    "SMM.dragSelection",
    "SMM.initSummaryEventHandlers",
    "SMM.summaryResize",
    "switchPaneToSummary",
    "initializeSummaryPanel",
    "emptySummaryPane",
    "resizeSummaryPane"
  ],
  "functions": [
    {
      "name": "onMouseUpSelRowCanvas",
      "namespace": "SMM",
      "signature": "SMM.onMouseUpSelRowCanvas(evt)",
      "description": "Handles the mouse up event on the selection row canvas. This function finalizes the selection of a row in the summary heatmap when the mouse button is released, updating the current row and ensuring the selection is within bounds.",
      "parameters": [
        {
          "name": "evt",
          "type": "Event",
          "description": "The mouse up event object containing details about the event."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Updates the current row in the summary heatmap.",
        "Ensures the selected row and column are within the bounds of the matrix.",
        "Enables or disables search buttons based on the current selection."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onMouseUpSelColCanvas",
      "namespace": "SMM",
      "signature": "SMM.onMouseUpSelColCanvas(evt)",
      "description": "Handles the mouse up event on the selection column canvas, updating the selection and ensuring it is within bounds.",
      "parameters": [
        {
          "name": "evt",
          "type": "Event",
          "description": "The mouse up event object."
        }
      ],
      "side_effects": [
        "Updates the current column selection in the primary map.",
        "Ensures the selected row and column are within the bounds of the matrix.",
        "Enables or disables search buttons based on the current state of the primary map.",
        "Resets clickStartRow and clickStartCol to null.",
        "Sets mouseEventActive to false."
      ],
      "returns": {
        "type": "void",
        "description": "No return value."
      }
    },
    {
      "name": "getTouchEventOffset",
      "namespace": "SMM",
      "signature": "SMM.getTouchEventOffset(evt)",
      "description": "Calculates the offset position of a touch event relative to the target element's bounding rectangle.",
      "parameters": [
        {
          "name": "evt",
          "type": "TouchEvent",
          "description": "The touch event object containing touch information."
        }
      ],
      "returns": {
        "type": "object",
        "description": "An object containing the offsetX and offsetY properties representing the touch position relative to the target element."
      }
    },
    {
      "name": "onMouseDownCanvas",
      "namespace": "SMM",
      "signature": "SMM.onMouseDownCanvas(evt)",
      "description": "Handles the mouse down event on the canvas, updating the cursor style and calculating the starting row and column for a heatmap interaction.",
      "parameters": [
        {
          "name": "evt",
          "type": "Event",
          "description": "The mouse event object containing details about the mouse down event."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Sets the global variable mouseEventActive to true.",
        "Prevents the default action and stops propagation of the event.",
        "Updates the cursor style of the canvas to 'crosshair' if the calculated row and column are greater than 0.",
        "Calculates and sets the global variables clickStartRow and clickStartCol based on the heatmap's row and column summary ratios."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onMouseOut",
      "namespace": "SMM",
      "signature": "SMM.onMouseOut(evt)",
      "description": "Handles the mouse out event on the canvas. If a drag selection is active, it triggers the mouse up event handler. It also resets the cursor style and updates the selection on the primary map if detail maps are present.",
      "parameters": [
        {
          "name": "evt",
          "type": "Event",
          "description": "The mouse out event object."
        }
      ],
      "side_effects": [
        "Triggers SMM.onMouseUpCanvas(evt) if dragSelect is true.",
        "Sets mouseEventActive to false.",
        "Changes the cursor style of SUM.canvas to 'default'.",
        "Calls DVW.primaryMap.updateSelection() if DVW.detailMaps.length > 0."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onMouseMoveCanvas",
      "namespace": "SMM",
      "signature": "SMM.onMouseMoveCanvas(evt)",
      "description": "Handles the mouse move event on the canvas. Depending on the state of the mouse event and the keys pressed, it either drags a selection or moves an element.",
      "parameters": [
        {
          "name": "evt",
          "type": "Event",
          "description": "The mouse move event object containing details about the event."
        }
      ],
      "side_effects": [
        "Calls SMM.dragSelection(evt) if the Shift key is pressed or if the event is a touch event.",
        "Calls SMM.dragMove(evt) if the Shift key is not pressed and the event is not a touch event."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "onMouseUpCanvas",
      "namespace": "SMM",
      "signature": "SMM.onMouseUpCanvas(evt)",
      "description": "Handles the mouse up event on the canvas. It translates the click into row and column positions and performs selection operations based on whether a drag selection is active.",
      "parameters": [
        {
          "name": "evt",
          "type": "Event",
          "description": "The mouse up event object containing details about the event."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Modifies global variables: mouseEventActive, dragSelect, clickStartRow, clickStartCol.",
        "Updates the cursor style of the canvas.",
        "Calls functions to update the selection and view in the primary map."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "clickSelection",
      "namespace": "SMM",
      "signature": "SMM.clickSelection(xPos, yPos)",
      "description": "Handles the click event on a selection by converting canvas coordinates to matrix coordinates and updating the primary map's selection.",
      "parameters": [
        {
          "name": "xPos",
          "type": "number",
          "description": "The x-coordinate of the click position on the canvas."
        },
        {
          "name": "yPos",
          "type": "number",
          "description": "The y-coordinate of the click position on the canvas."
        }
      ],
      "side_effects": [
        "Updates the current row and column in the primary map based on the click position.",
        "Calls the updateSelection method on the primary map.",
        "Enables or disables search buttons based on the primary map's state."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "dragMove",
      "namespace": "SMM",
      "signature": "SMM.dragMove(evt)",
      "description": "Handles the drag movement event on the primary map, updating the current row and column based on the drag position and enabling or disabling search buttons accordingly.",
      "parameters": [
        {
          "name": "evt",
          "type": "Event",
          "description": "The event object containing information about the drag movement, including touch or mouse event data."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Updates the current row and column in DVW.primaryMap based on the drag position.",
        "Calls DVW.primaryMap.updateSelection() to update the selection on the map.",
        "Calls SRCH.enableDisableSearchButtons(DVW.primaryMap) to enable or disable search buttons.",
        "Calls MMGR.getHeatMap().setUnAppliedChanges(true) to mark changes as unapplied."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "Does not return a value."
      }
    },
    {
      "name": "dragSelection",
      "namespace": "SMM",
      "signature": "SMM.dragSelection(evt)",
      "description": "Handles the drag selection on the summary side of the heat map. It calculates the start and end positions of the drag, updates the primary map's data, and draws a selection box on the canvas.",
      "parameters": [
        {
          "name": "evt",
          "type": "Event",
          "description": "The event object containing information about the drag event."
        }
      ],
      "side_effects": [
        "Updates DVW.primaryMap properties such as dataPerRow, dataPerCol, currentRow, and currentCol.",
        "Calls SRCH.enableDisableSearchButtons to enable or disable search buttons based on the primary map.",
        "Calls SUM.drawLeftCanvasBox to draw the selection box on the canvas."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "initSummaryEventHandlers",
      "namespace": "SMM",
      "signature": "SMM.initSummaryEventHandlers()",
      "description": "Initializes event handlers for various canvas elements in the summary section. This function sets up mouse and touch event listeners for different canvas elements to handle user interactions.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Attaches event listeners to canvas elements with IDs 'summary_row_select_canvas', 'summary_row_top_items_canvas', 'summary_col_select_canvas', and 'summary_col_top_items_canvas'.",
        "Modifies the event handlers for the 'SUM.canvas' element to handle mouse and touch events."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "summaryResize",
      "namespace": "SMM",
      "signature": "SMM.summaryResize()",
      "description": "Function for resizing the summary map. It checks if the 'NGCHMEmbed' element is hidden and returns early if it is. Otherwise, it finds the location of the summary map element and calls the resize handler for the summary pane.",
      "parameters": [],
      "called_urls": [],
      "side_effects": [
        "Modifies the display state of the 'NGCHMEmbed' element.",
        "Calls SMM.summaryPaneResizeHandler with the location of the summary map element."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "switchPaneToSummary",
      "namespace": "None",
      "signature": "switchPaneToSummary(loc)",
      "description": "Switches a specified pane to display the summary view of a heat map. If the summary view is already displayed in another pane, it removes it from the current pane before displaying it in the target pane.",
      "parameters": [
        {
          "name": "loc",
          "type": "object",
          "description": "An object representing the target pane location where the summary view should be displayed."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Clears existing dialogs in the target pane.",
        "Removes the summary view from its current pane if it is already displayed.",
        "Initializes the summary panel in the target pane.",
        "Sets the title and introductory text for the target pane.",
        "Registers event handlers for empty and resize events on the target pane."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "initializeSummaryPanel",
      "namespace": "None",
      "signature": "initializeSummaryPanel(pane)",
      "description": "Initializes the summary panel by setting up the necessary elements and event handlers. This function ensures that the summary panel is only initialized once and prepares the display and canvases for rendering summary views.",
      "parameters": [
        {
          "name": "pane",
          "type": "HTMLElement",
          "description": "The HTML element to which the summary panel will be appended."
        }
      ],
      "side_effects": [
        "Sets SUM.chmElement to the summary panel element.",
        "Appends the summary panel element to the provided pane.",
        "Modifies the display style of the summary panel element.",
        "Initializes summary display and event handlers.",
        "Resizes various canvases for the summary panel.",
        "Calls SUM.redrawSummaryPanel to render the summary panel."
      ],
      "returns": {
        "type": "void",
        "description": "Does not return a value."
      }
    },
    {
      "name": "emptySummaryPane",
      "namespace": "None",
      "signature": "emptySummaryPane(pane, elements)",
      "description": "This function is called when a pane showing the summary NG-CHM (Next Generation Clustered Heat Map) is emptied. It saves the current summary element in the templates and then clears the summary element.",
      "parameters": [
        {
          "name": "pane",
          "type": "HTMLElement",
          "description": "The pane element that is being emptied."
        },
        {
          "name": "elements",
          "type": "Array",
          "description": "An array of elements related to the pane."
        }
      ],
      "side_effects": [
        "Appends SUM.chmElement to the 'templates' element in the document.",
        "Sets SUM.chmElement to null."
      ],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    },
    {
      "name": "resizeSummaryPane",
      "namespace": "None",
      "signature": "resizeSummaryPane(loc)",
      "description": "This function is called when a pane showing the summary NG-CHM (Next Generation Clustered Heat Map) is resized. It calculates a new layout and redraws the pane's contents.",
      "parameters": [
        {
          "name": "loc",
          "type": "String",
          "description": "The location or identifier of the pane being resized."
        }
      ],
      "called_urls": [],
      "side_effects": [
        "Calculates a new layout for the summary pane.",
        "Redraws the contents of the summary pane."
      ],
      "error_handling": [],
      "returns": {
        "type": "void",
        "description": "This function does not return a value."
      }
    }
  ]
}